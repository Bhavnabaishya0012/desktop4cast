import { type Bet } from '../../global';
type SubmitProps = {
    bets: Array<Pick<Bet, 'tokenId' | 'coreAddress' | 'freebetContractAddress' | 'freebetId'>>;
};
export declare const useRedeemBet: () => {
    isPending: boolean;
    isProcessing: boolean;
    data: `0x${string}` | undefined;
    error: import("wagmi").ConnectorAccountNotFoundErrorType | import("wagmi").ConnectorChainMismatchErrorType | import("@wagmi/core").ConnectorNotConnectedErrorType | import("wagmi").ConnectorUnavailableReconnectingErrorType | import("viem").BaseErrorType | import("@wagmi/core/dist/types/errors/base").ErrorType | import("@wagmi/core/dist/types/errors/base").BaseErrorType | import("viem").AbiFunctionNotFoundErrorType | import("viem").AbiEncodingLengthMismatchErrorType | import("viem").InvalidAddressErrorType | import("viem").AbiEncodingArrayLengthMismatchErrorType | import("viem").IntegerOutOfRangeErrorType | import("viem").SizeExceedsPaddingSizeErrorType | import("viem").InvalidArrayErrorType | import("viem").AbiEncodingBytesSizeMismatchErrorType | import("viem").SizeOverflowErrorType | import("viem").SliceOffsetOutOfBoundsErrorType | import("viem").InvalidAbiEncodingTypeErrorType | import("viem").InvalidDefinitionTypeErrorType | import("viem/_types/errors/abi").AbiItemAmbiguityErrorType | import("viem").GetContractErrorReturnType<import("viem").DecodeFunctionResultErrorType | import("viem").CallErrorType> | import("viem/_types/errors/account").AccountNotFoundErrorType | null;
    submit: (props: SubmitProps) => Promise<import("viem").TransactionReceipt>;
};
export {};

declare const _default: readonly [{
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [];
    readonly name: "AlreadyPaid";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "BetNotExists";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ConditionAlreadyResolved";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ConditionNotFinished";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ConditionNotRunning";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint64";
        readonly name: "outcome";
        readonly type: "uint64";
    }];
    readonly name: "DuplicateOutcomes";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "IncorrectAffiliate";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "IncorrectAmount";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "IncorrectConditionIds";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "IncorrectCore";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "IncorrectOdds";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "IncorrectSettleDate";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "IncorrectWinningOutcomesCount";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidBettorSignature";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidChainId";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidNonce";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidOracleSignature";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "OnlyLp";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly name: "OnlyOracle";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "PayoutLimit";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum SafeCast.Type";
        readonly name: "to";
        readonly type: "uint8";
    }];
    readonly name: "SafeCastError";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "SignatureExpired";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "SmallOdds";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "WrongOutcome";
    readonly type: "error";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "gameId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "conditionId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64[]";
        readonly name: "outcomes";
        readonly type: "uint64[]";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256[]";
        readonly name: "odds";
        readonly type: "uint256[]";
    }, {
        readonly indexed: false;
        readonly internalType: "uint8";
        readonly name: "winningOutcomesCount";
        readonly type: "uint8";
    }];
    readonly name: "ConditionCreated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "conditionId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint8";
        readonly name: "state";
        readonly type: "uint8";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64[]";
        readonly name: "winningOutcomes";
        readonly type: "uint64[]";
    }, {
        readonly indexed: false;
        readonly internalType: "int128";
        readonly name: "lpProfit";
        readonly type: "int128";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64";
        readonly name: "settledAt";
        readonly type: "uint64";
    }];
    readonly name: "ConditionResolved";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint8";
        readonly name: "version";
        readonly type: "uint8";
    }];
    readonly name: "Initialized";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "bettor";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "affiliate";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "conditionId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "tokenId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64";
        readonly name: "outcomeId";
        readonly type: "uint64";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "nonce";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint128";
        readonly name: "amount";
        readonly type: "uint128";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64";
        readonly name: "odds";
        readonly type: "uint64";
    }, {
        readonly indexed: false;
        readonly internalType: "uint128";
        readonly name: "payoutLimit";
        readonly type: "uint128";
    }];
    readonly name: "NewLiveBet";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "previousOwner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "OwnershipTransferred";
    readonly type: "event";
}, {
    readonly inputs: readonly [];
    readonly name: "MAX_OUTCOMES_COUNT";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "azuroBet";
    readonly outputs: readonly [{
        readonly internalType: "contract IAzuroBet";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "bets";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "conditionId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint128";
        readonly name: "amount";
        readonly type: "uint128";
    }, {
        readonly internalType: "uint128";
        readonly name: "payout";
        readonly type: "uint128";
    }, {
        readonly internalType: "uint64";
        readonly name: "outcome";
        readonly type: "uint64";
    }, {
        readonly internalType: "uint64";
        readonly name: "timestamp";
        readonly type: "uint64";
    }, {
        readonly internalType: "bool";
        readonly name: "isPaid";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "conditionIds";
        readonly type: "uint256[]";
    }];
    readonly name: "cancelConditions";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "checkOwner";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "conditions";
    readonly outputs: readonly [{
        readonly internalType: "int128";
        readonly name: "maxReserved";
        readonly type: "int128";
    }, {
        readonly internalType: "uint128";
        readonly name: "totalNetBets";
        readonly type: "uint128";
    }, {
        readonly internalType: "uint64";
        readonly name: "settledAt";
        readonly type: "uint64";
    }, {
        readonly internalType: "uint48";
        readonly name: "lastDepositId";
        readonly type: "uint48";
    }, {
        readonly internalType: "uint8";
        readonly name: "winningOutcomesCount";
        readonly type: "uint8";
    }, {
        readonly internalType: "enum IConditionState.ConditionState";
        readonly name: "state";
        readonly type: "uint8";
    }, {
        readonly internalType: "address";
        readonly name: "oracle";
        readonly type: "address";
    }, {
        readonly internalType: "bool";
        readonly name: "isExpressForbidden";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "conditionId";
        readonly type: "uint256";
    }];
    readonly name: "getCondition";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "int128";
            readonly name: "maxReserved";
            readonly type: "int128";
        }, {
            readonly internalType: "uint128[]";
            readonly name: "payouts";
            readonly type: "uint128[]";
        }, {
            readonly internalType: "uint128";
            readonly name: "totalNetBets";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint64";
            readonly name: "settledAt";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint48";
            readonly name: "lastDepositId";
            readonly type: "uint48";
        }, {
            readonly internalType: "uint8";
            readonly name: "winningOutcomesCount";
            readonly type: "uint8";
        }, {
            readonly internalType: "enum IConditionState.ConditionState";
            readonly name: "state";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "oracle";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isExpressForbidden";
            readonly type: "bool";
        }];
        readonly internalType: "struct IClientCondition.Condition";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "conditionId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint64";
        readonly name: "outcome";
        readonly type: "uint64";
    }];
    readonly name: "getOutcomeIndex";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "azuroBet_";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "lp_";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "conditionId";
        readonly type: "uint256";
    }];
    readonly name: "isConditionCanceled";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "conditionId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint64";
        readonly name: "outcome";
        readonly type: "uint64";
    }];
    readonly name: "isOutcomeWinning";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "lp";
    readonly outputs: readonly [{
        readonly internalType: "contract ILP";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "nonces";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "outcomeNumbers";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "bettor";
        readonly type: "address";
    }, {
        readonly internalType: "uint128";
        readonly name: "amount";
        readonly type: "uint128";
    }, {
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "affiliate";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "minOdds";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly internalType: "struct IBet.BetData";
        readonly name: "betData";
        readonly type: "tuple";
    }];
    readonly name: "putBet";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tokenId";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "conditionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint64[]";
            readonly name: "winningOutcomes";
            readonly type: "uint64[]";
        }, {
            readonly internalType: "uint64";
            readonly name: "settledAt";
            readonly type: "uint64";
        }];
        readonly internalType: "struct IClientCoreBase.ResolveData[]";
        readonly name: "data";
        readonly type: "tuple[]";
    }];
    readonly name: "resolveConditions";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tokenId";
        readonly type: "uint256";
    }];
    readonly name: "resolvePayout";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }, {
        readonly internalType: "uint128";
        readonly name: "";
        readonly type: "uint128";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "snapshotTimes";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "snapshots";
    readonly outputs: readonly [{
        readonly internalType: "uint128";
        readonly name: "totalNetBets";
        readonly type: "uint128";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tokenId";
        readonly type: "uint256";
    }];
    readonly name: "viewPayout";
    readonly outputs: readonly [{
        readonly internalType: "uint128";
        readonly name: "";
        readonly type: "uint128";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "winningOutcomes";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}];
export default _default;

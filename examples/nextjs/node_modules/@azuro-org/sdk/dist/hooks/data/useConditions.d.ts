import { type FetchPolicy } from '@apollo/client';
import { type Condition_Filter } from '@azuro-org/toolkit';
type QueryProps = {
    pollInterval?: number;
    skip?: boolean;
    fetchPolicy?: FetchPolicy;
};
type UseConditionsProps = {
    gameId: string | bigint;
    filter?: Condition_Filter;
    prematchQuery?: QueryProps;
    liveQuery?: QueryProps;
};
export declare const useConditions: (props: UseConditionsProps) => {
    prematchConditions: {
        __typename?: "Condition";
        wonOutcomeIds?: Array<string> | null;
        id: string;
        conditionId: string;
        status: import("@azuro-org/toolkit").ConditionStatus;
        title?: string | null;
        isExpressForbidden: boolean;
        outcomes: Array<{
            __typename?: "Outcome";
            title?: string | null;
            outcomeId: string;
            odds: string;
        }>;
        core: {
            __typename?: "CoreContract";
            address: string;
            liquidityPool: {
                __typename?: "LiquidityPoolContract";
                address: string;
            };
        };
        game: {
            __typename?: "Game";
            gameId: string;
            sport: {
                __typename?: "Sport";
                sportId: string;
            };
        };
    }[] | undefined;
    liveConditions: {
        __typename?: "Condition";
        wonOutcomeIds?: Array<string> | null;
        id: string;
        conditionId: string;
        status: import("@azuro-org/toolkit/dist/docs/live/types").ConditionStatus;
        outcomes: Array<{
            __typename?: "Outcome";
            outcomeId: string;
        }>;
        game: {
            __typename?: "Game";
            gameId: string;
            sport: {
                __typename?: "Sport";
                sportId: string;
            };
        };
    }[] | undefined;
    loading: boolean;
    error: import("@apollo/client").ApolloError | undefined;
};
export {};

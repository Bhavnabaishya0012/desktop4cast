import React from 'react';
import { type Selection, ConditionStatus } from '@azuro-org/toolkit';
import type { Address } from 'viem';
import { type FreeBet } from '../hooks/data/useFreeBets';
export declare enum BetslipDisableReason {
    ConditionStatus = "ConditionStatus",
    BetAmountGreaterThanMaxBet = "BetAmountGreaterThanMaxBet",
    BetAmountLowerThanMinBet = "BetAmountLowerThanMinBet",
    BatchWithLive = "BatchWithLive",
    ComboWithLive = "ComboWithLive",
    ComboWithForbiddenItem = "ComboWithForbiddenItem",
    ComboWithSameGame = "ComboWithSameGame",
    PrematchConditionInStartedGame = "PrematchConditionInStartedGame",
    FreeBetWithLive = "FreeBetWithLive",
    FreeBetWithCombo = "FreeBetWithCombo",
    FreeBetWithBatch = "FreeBetWithBatch",
    FreeBetExpired = "FreeBetExpired",
    FreeBetMinOdds = "FreeBetMinOdds"
}
type Game = {
    gameId: string;
    title: string;
    countryName: string;
    countrySlug: string;
    leagueName: string;
    leagueSlug: string;
    participants: Array<{
        name: string;
        image?: string;
    }>;
    startsAt: number;
    sportId: number;
    sportSlug: string;
    sportName: string;
};
export type BetslipItem = {
    lpAddress: string;
    game: Game;
    isExpressForbidden: boolean;
    marketName: string;
    selectionName: string;
} & Selection;
type AddItemProps = {
    gameId: string;
    lpAddress: string;
    isExpressForbidden: boolean;
} & Selection;
type RemoveItemProps = Omit<Selection, 'coreAddress'>;
type ChangeBatchBetAmountItem = Omit<Selection, 'coreAddress'>;
export type BaseBetslipContextValue = {
    items: BetslipItem[];
    addItem: (itemProps: AddItemProps) => void;
    removeItem: (itemProps: RemoveItemProps) => void;
    clear: () => void;
};
export type DetailedBetslipContextValue = {
    betAmount: string;
    batchBetAmounts: Record<string, string>;
    odds: Record<string, number>;
    totalOdds: number;
    maxBet: number | undefined;
    minBet: number | undefined;
    selectedFreeBet: FreeBet | undefined;
    freeBets: FreeBet[] | undefined | null;
    statuses: Record<string, ConditionStatus>;
    disableReason: BetslipDisableReason | undefined;
    changeBetAmount: (value: string) => void;
    changeBatchBetAmount: (item: ChangeBatchBetAmountItem, value: string) => void;
    changeBatch: (value: boolean) => void;
    selectFreeBet: (value?: FreeBet) => void;
    isLiveBet: boolean;
    isBatch: boolean;
    isStatusesFetching: boolean;
    isOddsFetching: boolean;
    isFreeBetsFetching: boolean;
    isBetAllowed: boolean;
};
export declare const BaseBetslipContext: React.Context<BaseBetslipContextValue | null>;
export declare const DetailedBetslipContext: React.Context<DetailedBetslipContextValue | null>;
export declare const useBaseBetslip: () => BaseBetslipContextValue;
export declare const useDetailedBetslip: () => DetailedBetslipContextValue;
export type BetslipProviderProps = {
    children: React.ReactNode;
    affiliate?: Address;
    isBatchBetWithSameGameEnabled?: boolean;
};
export declare const BetslipProvider: React.FC<BetslipProviderProps>;
export {};

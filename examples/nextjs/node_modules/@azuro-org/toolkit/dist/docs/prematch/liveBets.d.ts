import * as Types from './types';
import * as Apollo from '@apollo/client';
export type LiveBetsQueryVariables = Types.Exact<{
    first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
    skip?: Types.InputMaybe<Types.Scalars['Int']['input']>;
    where: Types.Bet_Filter;
    orderBy?: Types.InputMaybe<Types.Bet_OrderBy>;
    orderDirection?: Types.InputMaybe<Types.OrderDirection>;
}>;
export type LiveBetsQuery = {
    __typename?: 'Query';
    liveBets: Array<{
        __typename?: 'LiveBet';
        id: string;
        amount: string;
        status: Types.BetStatus;
        potentialPayout: string;
        payout?: string | null;
        result?: Types.BetResult | null;
        isRedeemed: boolean;
        isRedeemable: boolean;
        odds: string;
        settledOdds?: string | null;
        affiliate?: string | null;
        tokenId: string;
        createdAt: string;
        txHash: string;
        core: {
            __typename?: 'CoreContract';
            address: string;
            liquidityPool: {
                __typename?: 'LiquidityPoolContract';
                address: string;
            };
        };
        selections: Array<{
            __typename?: 'LiveSelection';
            odds: string;
            result?: Types.SelectionResult | null;
            outcome: {
                __typename?: 'LiveOutcome';
                outcomeId: string;
                condition: {
                    __typename?: 'LiveCondition';
                    conditionId: string;
                    status: Types.ConditionStatus;
                    gameId: string;
                };
            };
        }>;
    }>;
};
export declare const LiveBetsDocument: Apollo.DocumentNode;
export type LiveBetsQueryResult = Apollo.QueryResult<LiveBetsQuery, LiveBetsQueryVariables>;

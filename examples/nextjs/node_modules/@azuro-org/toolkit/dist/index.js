import {gnosis,polygon,polygonAmoy,chiliz,spicy}from'viem/chains';import {gql}from'@apollo/client';import {readContracts,readContract}from'@wagmi/core';import {parseUnits,formatUnits,encodeAbiParameters,parseAbiParameters,encodeFunctionData}from'viem';import {dictionaries,getMarketKey,getMarketName,getSelectionName,getMarketDescription}from'@azuro-org/dictionaries';const isDevEnabled = Boolean(JSON.parse(process.env.AZURO_UNSTABLE_DEV_ENABLED || 'false'));
var Environment;
(function (Environment) {
    Environment["GnosisDevXDAI"] = "GnosisDevXDAI";
    Environment["GnosisXDAI"] = "GnosisXDAI";
    Environment["PolygonUSDT"] = "PolygonUSDT";
    Environment["PolygonAmoyAZUSD"] = "PolygonAmoyAZUSD";
    Environment["PolygonAmoyUSDT"] = "PolygonAmoyUSDT";
    Environment["ChilizWCHZ"] = "ChilizWCHZ";
    Environment["ChilizSpicyWCHZ"] = "ChilizSpicyWCHZ";
})(Environment || (Environment = {}));
const environments = {
    [gnosis.id]: isDevEnabled ? Environment.GnosisDevXDAI : Environment.GnosisXDAI,
    [polygon.id]: Environment.PolygonUSDT,
    [polygonAmoy.id]: isDevEnabled ? Environment.PolygonAmoyUSDT : Environment.PolygonAmoyAZUSD,
    [chiliz.id]: Environment.ChilizWCHZ,
    [spicy.id]: Environment.ChilizSpicyWCHZ,
};var lpAbi = [
    { 'inputs': [], 'name': 'BetExpired', 'type': 'error',
    },
    { 'inputs': [
            { 'internalType': 'uint64', 'name': 'waitTime', 'type': 'uint64',
            },
        ], 'name': 'ClaimTimeout', 'type': 'error',
    },
    { 'inputs': [], 'name': 'CoreNotActive', 'type': 'error',
    },
    { 'inputs': [], 'name': 'DepositDoesNotExist', 'type': 'error',
    },
    { 'inputs': [], 'name': 'GameAlreadyCanceled', 'type': 'error',
    },
    { 'inputs': [], 'name': 'GameAlreadyCreated', 'type': 'error',
    },
    { 'inputs': [], 'name': 'GameCanceled_', 'type': 'error',
    },
    { 'inputs': [], 'name': 'GameNotExists', 'type': 'error',
    },
    { 'inputs': [], 'name': 'IncorrectCoreState', 'type': 'error',
    },
    { 'inputs': [], 'name': 'IncorrectFee', 'type': 'error',
    },
    { 'inputs': [], 'name': 'IncorrectGameId', 'type': 'error',
    },
    { 'inputs': [], 'name': 'IncorrectMinBet', 'type': 'error',
    },
    { 'inputs': [], 'name': 'IncorrectMinDepo', 'type': 'error',
    },
    { 'inputs': [], 'name': 'IncorrectPercent', 'type': 'error',
    },
    { 'inputs': [], 'name': 'IncorrectReinforcementAbility', 'type': 'error',
    },
    { 'inputs': [], 'name': 'IncorrectTimestamp', 'type': 'error',
    },
    { 'inputs': [], 'name': 'LeafNotExist', 'type': 'error',
    },
    { 'inputs': [], 'name': 'LiquidityIsLocked', 'type': 'error',
    },
    { 'inputs': [], 'name': 'LiquidityNotOwned', 'type': 'error',
    },
    { 'inputs': [], 'name': 'NoLiquidity', 'type': 'error',
    },
    { 'inputs': [], 'name': 'NotEnoughLiquidity', 'type': 'error',
    },
    { 'inputs': [], 'name': 'OnlyFactory', 'type': 'error',
    },
    { 'inputs': [
            { 'internalType': 'enum SafeCast.Type', 'name': 'to', 'type': 'uint8',
            },
        ], 'name': 'SafeCastError', 'type': 'error',
    },
    { 'inputs': [], 'name': 'SmallBet', 'type': 'error',
    },
    { 'inputs': [], 'name': 'SmallDepo', 'type': 'error',
    },
    { 'inputs': [], 'name': 'SmallDonation', 'type': 'error',
    },
    { 'inputs': [], 'name': 'UnknownCore', 'type': 'error',
    },
    { 'inputs': [
            { 'internalType': 'uint64', 'name': 'waitTime', 'type': 'uint64',
            },
        ], 'name': 'WithdrawalTimeout', 'type': 'error',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'address', 'name': 'owner', 'type': 'address',
            },
            { 'indexed': true, 'internalType': 'address', 'name': 'approved', 'type': 'address',
            },
            { 'indexed': true, 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
        ], 'name': 'Approval', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'address', 'name': 'owner', 'type': 'address',
            },
            { 'indexed': true, 'internalType': 'address', 'name': 'operator', 'type': 'address',
            },
            { 'indexed': false, 'internalType': 'bool', 'name': 'approved', 'type': 'bool',
            },
        ], 'name': 'ApprovalForAll', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
            { 'indexed': true, 'internalType': 'address', 'name': 'bettor', 'type': 'address',
            },
            { 'indexed': false, 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
            { 'indexed': false, 'internalType': 'uint256', 'name': 'amount', 'type': 'uint256',
            },
        ], 'name': 'BettorWin', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': false, 'internalType': 'uint64', 'name': 'newClaimTimeout', 'type': 'uint64',
            },
        ], 'name': 'ClaimTimeoutChanged', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
            { 'indexed': false, 'internalType': 'enum ILP.CoreState', 'name': 'state', 'type': 'uint8',
            },
            { 'indexed': false, 'internalType': 'uint64', 'name': 'reinforcementAbility', 'type': 'uint64',
            },
            { 'indexed': false, 'internalType': 'uint128', 'name': 'minBet', 'type': 'uint128',
            },
        ], 'name': 'CoreSettingsUpdated', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': false, 'internalType': 'address', 'name': 'newDataProvider', 'type': 'address',
            },
        ], 'name': 'DataProviderChanged', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': false, 'internalType': 'enum ILP.FeeType', 'name': 'feeType', 'type': 'uint8',
            },
            { 'indexed': false, 'internalType': 'uint64', 'name': 'fee', 'type': 'uint64',
            },
        ], 'name': 'FeeChanged', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
        ], 'name': 'GameCanceled', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
            { 'indexed': false, 'internalType': 'uint64', 'name': 'newStart', 'type': 'uint64',
            },
        ], 'name': 'GameShifted', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': false, 'internalType': 'uint8', 'name': 'version', 'type': 'uint8',
            },
        ], 'name': 'Initialized', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'address', 'name': 'account', 'type': 'address',
            },
            { 'indexed': true, 'internalType': 'uint48', 'name': 'depositId', 'type': 'uint48',
            },
            { 'indexed': false, 'internalType': 'uint256', 'name': 'amount', 'type': 'uint256',
            },
        ], 'name': 'LiquidityAdded', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'address', 'name': 'account', 'type': 'address',
            },
            { 'indexed': true, 'internalType': 'uint48', 'name': 'depositId', 'type': 'uint48',
            },
            { 'indexed': false, 'internalType': 'uint256', 'name': 'amount', 'type': 'uint256',
            },
        ], 'name': 'LiquidityDonated', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': false, 'internalType': 'address', 'name': 'newLiquidityManager', 'type': 'address',
            },
        ], 'name': 'LiquidityManagerChanged', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'address', 'name': 'account', 'type': 'address',
            },
            { 'indexed': true, 'internalType': 'uint48', 'name': 'depositId', 'type': 'uint48',
            },
            { 'indexed': false, 'internalType': 'uint256', 'name': 'amount', 'type': 'uint256',
            },
        ], 'name': 'LiquidityRemoved', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': false, 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
            { 'indexed': false, 'internalType': 'uint128', 'name': 'newMinBet', 'type': 'uint128',
            },
        ], 'name': 'MinBetChanged', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': false, 'internalType': 'uint128', 'name': 'newMinDepo', 'type': 'uint128',
            },
        ], 'name': 'MinDepoChanged', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
            { 'indexed': false, 'internalType': 'uint64', 'name': 'startsAt', 'type': 'uint64',
            },
            { 'indexed': false, 'internalType': 'bytes', 'name': 'data', 'type': 'bytes',
            },
        ], 'name': 'NewGame', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'address', 'name': 'previousOwner', 'type': 'address',
            },
            { 'indexed': true, 'internalType': 'address', 'name': 'newOwner', 'type': 'address',
            },
        ], 'name': 'OwnershipTransferred', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': false, 'internalType': 'uint128', 'name': 'newReinforcementAbility', 'type': 'uint128',
            },
        ], 'name': 'ReinforcementAbilityChanged', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': true, 'internalType': 'address', 'name': 'from', 'type': 'address',
            },
            { 'indexed': true, 'internalType': 'address', 'name': 'to', 'type': 'address',
            },
            { 'indexed': true, 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
        ], 'name': 'Transfer', 'type': 'event',
    },
    { 'anonymous': false, 'inputs': [
            { 'indexed': false, 'internalType': 'uint64', 'name': 'newWithdrawTimeout', 'type': 'uint64',
            },
        ], 'name': 'WithdrawTimeoutChanged', 'type': 'event',
    },
    { 'inputs': [], 'name': 'access', 'outputs': [
            { 'internalType': 'contract IAccess', 'name': '', 'type': 'address',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
        ], 'name': 'addCondition', 'outputs': [
            { 'internalType': 'uint64', 'name': '', 'type': 'uint64',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
        ], 'name': 'addCore', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint128', 'name': 'amount', 'type': 'uint128',
            },
            { 'internalType': 'bytes', 'name': 'data', 'type': 'bytes',
            },
        ], 'name': 'addLiquidity', 'outputs': [
            { 'internalType': 'uint48', 'name': 'depositId', 'type': 'uint48',
            },
        ], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
            { 'internalType': 'uint128', 'name': 'lockedReserve', 'type': 'uint128',
            },
            { 'internalType': 'uint128', 'name': 'finalReserve', 'type': 'uint128',
            },
            { 'internalType': 'uint48', 'name': 'depositId', 'type': 'uint48',
            },
        ], 'name': 'addReserve', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'to', 'type': 'address',
            },
            { 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
        ], 'name': 'approve', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'owner', 'type': 'address',
            },
        ], 'name': 'balanceOf', 'outputs': [
            { 'internalType': 'uint256', 'name': '', 'type': 'uint256',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
            { 'internalType': 'uint128', 'name': 'amount', 'type': 'uint128',
            },
            { 'internalType': 'uint64', 'name': 'expiresAt', 'type': 'uint64',
            },
            { 'components': [
                    { 'internalType': 'address', 'name': 'affiliate', 'type': 'address',
                    },
                    { 'internalType': 'uint64', 'name': 'minOdds', 'type': 'uint64',
                    },
                    { 'internalType': 'bytes', 'name': 'data', 'type': 'bytes',
                    },
                ], 'internalType': 'struct IBet.BetData', 'name': 'betData', 'type': 'tuple',
            },
        ], 'name': 'bet', 'outputs': [
            { 'internalType': 'uint256', 'name': '', 'type': 'uint256',
            },
        ], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'bettor', 'type': 'address',
            },
            { 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
            { 'internalType': 'uint128', 'name': 'amount', 'type': 'uint128',
            },
            { 'internalType': 'uint64', 'name': 'expiresAt', 'type': 'uint64',
            },
            { 'components': [
                    { 'internalType': 'address', 'name': 'affiliate', 'type': 'address',
                    },
                    { 'internalType': 'uint64', 'name': 'minOdds', 'type': 'uint64',
                    },
                    { 'internalType': 'bytes', 'name': 'data', 'type': 'bytes',
                    },
                ], 'internalType': 'struct IBet.BetData', 'name': 'betData', 'type': 'tuple',
            },
        ], 'name': 'betFor', 'outputs': [
            { 'internalType': 'uint256', 'name': '', 'type': 'uint256',
            },
        ], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
        ], 'name': 'cancelGame', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint64', 'name': 'newClaimTimeout', 'type': 'uint64',
            },
        ], 'name': 'changeClaimTimeout', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'newDataProvider', 'type': 'address',
            },
        ], 'name': 'changeDataProvider', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'enum ILP.FeeType', 'name': 'feeType', 'type': 'uint8',
            },
            { 'internalType': 'uint64', 'name': 'newFee', 'type': 'uint64',
            },
        ], 'name': 'changeFee', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'newLiquidityManager', 'type': 'address',
            },
        ], 'name': 'changeLiquidityManager', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
            { 'internalType': 'int128', 'name': 'deltaReserve', 'type': 'int128',
            },
        ], 'name': 'changeLockedLiquidity', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint128', 'name': 'newMinDepo', 'type': 'uint128',
            },
        ], 'name': 'changeMinDepo', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint64', 'name': 'newWithdrawTimeout', 'type': 'uint64',
            },
        ], 'name': 'changeWithdrawTimeout', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'account', 'type': 'address',
            },
            { 'internalType': 'address', 'name': 'target', 'type': 'address',
            },
            { 'internalType': 'bytes4', 'name': 'selector', 'type': 'bytes4',
            },
        ], 'name': 'checkAccess', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
        ], 'name': 'checkCore', 'outputs': [], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'account', 'type': 'address',
            },
        ], 'name': 'checkOwner', 'outputs': [], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'claimReward', 'outputs': [
            { 'internalType': 'uint128', 'name': 'claimedAmount', 'type': 'uint128',
            },
        ], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [], 'name': 'claimTimeout', 'outputs': [
            { 'internalType': 'uint64', 'name': '', 'type': 'uint64',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': '', 'type': 'address',
            },
        ], 'name': 'cores', 'outputs': [
            { 'internalType': 'enum ILP.CoreState', 'name': 'state', 'type': 'uint8',
            },
            { 'internalType': 'uint64', 'name': 'reinforcementAbility', 'type': 'uint64',
            },
            { 'internalType': 'uint128', 'name': 'minBet', 'type': 'uint128',
            },
            { 'internalType': 'uint128', 'name': 'lockedLiquidity', 'type': 'uint128',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
            { 'internalType': 'uint64', 'name': 'startsAt', 'type': 'uint64',
            },
            { 'internalType': 'bytes', 'name': 'data', 'type': 'bytes',
            },
        ], 'name': 'createGame', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [], 'name': 'dataProvider', 'outputs': [
            { 'internalType': 'address', 'name': '', 'type': 'address',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint128', 'name': 'amount', 'type': 'uint128',
            },
            { 'internalType': 'uint48', 'name': 'depositId', 'type': 'uint48',
            },
        ], 'name': 'donateLiquidity', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [], 'name': 'factory', 'outputs': [
            { 'internalType': 'contract IOwnable', 'name': '', 'type': 'address',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': '', 'type': 'uint256',
            },
        ], 'name': 'fees', 'outputs': [
            { 'internalType': 'uint64', 'name': '', 'type': 'uint64',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': '', 'type': 'uint256',
            },
        ], 'name': 'games', 'outputs': [
            { 'internalType': 'bytes32', 'name': 'unusedVariable', 'type': 'bytes32',
            },
            { 'internalType': 'uint128', 'name': 'lockedLiquidity', 'type': 'uint128',
            },
            { 'internalType': 'uint64', 'name': 'startsAt', 'type': 'uint64',
            },
            { 'internalType': 'bool', 'name': 'canceled', 'type': 'bool',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
        ], 'name': 'getApproved', 'outputs': [
            { 'internalType': 'address', 'name': '', 'type': 'address',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
        ], 'name': 'getGameInfo', 'outputs': [
            { 'internalType': 'uint64', 'name': '', 'type': 'uint64',
            },
            { 'internalType': 'bool', 'name': '', 'type': 'bool',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'getLastDepositId', 'outputs': [
            { 'internalType': 'uint48', 'name': 'depositId', 'type': 'uint48',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
        ], 'name': 'getLockedLiquidityLimit', 'outputs': [
            { 'internalType': 'uint128', 'name': '', 'type': 'uint128',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'getReserve', 'outputs': [
            { 'internalType': 'uint128', 'name': 'reserve', 'type': 'uint128',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'access_', 'type': 'address',
            },
            { 'internalType': 'address', 'name': 'dataProvider_', 'type': 'address',
            },
            { 'internalType': 'address', 'name': 'token_', 'type': 'address',
            },
            { 'internalType': 'uint128', 'name': 'minDepo_', 'type': 'uint128',
            },
            { 'internalType': 'uint64', 'name': 'daoFee', 'type': 'uint64',
            },
            { 'internalType': 'uint64', 'name': 'dataProviderFee', 'type': 'uint64',
            },
        ], 'name': 'initialize', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'owner', 'type': 'address',
            },
            { 'internalType': 'address', 'name': 'operator', 'type': 'address',
            },
        ], 'name': 'isApprovedForAll', 'outputs': [
            { 'internalType': 'bool', 'name': '', 'type': 'bool',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'depositId', 'type': 'uint256',
            },
        ], 'name': 'isDepositExists', 'outputs': [
            { 'internalType': 'bool', 'name': '', 'type': 'bool',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
        ], 'name': 'isGameCanceled', 'outputs': [
            { 'internalType': 'bool', 'name': '', 'type': 'bool',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'liquidityManager', 'outputs': [
            { 'internalType': 'contract ILiquidityManager', 'name': '', 'type': 'address',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'lockedLiquidity', 'outputs': [
            { 'internalType': 'uint128', 'name': '', 'type': 'uint128',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'minDepo', 'outputs': [
            { 'internalType': 'uint128', 'name': '', 'type': 'uint128',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'name', 'outputs': [
            { 'internalType': 'string', 'name': '', 'type': 'string',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'nextNode', 'outputs': [
            { 'internalType': 'uint48', 'name': '', 'type': 'uint48',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint48', 'name': 'leaf', 'type': 'uint48',
            },
        ], 'name': 'nodeWithdrawView', 'outputs': [
            { 'internalType': 'uint128', 'name': 'withdrawAmount', 'type': 'uint128',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'owner', 'outputs': [
            { 'internalType': 'address', 'name': '', 'type': 'address',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
        ], 'name': 'ownerOf', 'outputs': [
            { 'internalType': 'address', 'name': '', 'type': 'address',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': '', 'type': 'address',
            },
        ], 'name': 'rewards', 'outputs': [
            { 'internalType': 'int128', 'name': 'amount', 'type': 'int128',
            },
            { 'internalType': 'uint64', 'name': 'claimedAt', 'type': 'uint64',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'from', 'type': 'address',
            },
            { 'internalType': 'address', 'name': 'to', 'type': 'address',
            },
            { 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
        ], 'name': 'safeTransferFrom', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'from', 'type': 'address',
            },
            { 'internalType': 'address', 'name': 'to', 'type': 'address',
            },
            { 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
            { 'internalType': 'bytes', 'name': 'data', 'type': 'bytes',
            },
        ], 'name': 'safeTransferFrom', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'operator', 'type': 'address',
            },
            { 'internalType': 'bool', 'name': 'approved', 'type': 'bool',
            },
        ], 'name': 'setApprovalForAll', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'gameId', 'type': 'uint256',
            },
            { 'internalType': 'uint64', 'name': 'startsAt', 'type': 'uint64',
            },
        ], 'name': 'shiftGame', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'bytes4', 'name': 'interfaceId', 'type': 'bytes4',
            },
        ], 'name': 'supportsInterface', 'outputs': [
            { 'internalType': 'bool', 'name': '', 'type': 'bool',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'symbol', 'outputs': [
            { 'internalType': 'string', 'name': '', 'type': 'string',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'token', 'outputs': [
            { 'internalType': 'address', 'name': '', 'type': 'address',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'index', 'type': 'uint256',
            },
        ], 'name': 'tokenByIndex', 'outputs': [
            { 'internalType': 'uint256', 'name': '', 'type': 'uint256',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'owner', 'type': 'address',
            },
            { 'internalType': 'uint256', 'name': 'index', 'type': 'uint256',
            },
        ], 'name': 'tokenOfOwnerByIndex', 'outputs': [
            { 'internalType': 'uint256', 'name': '', 'type': 'uint256',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
        ], 'name': 'tokenURI', 'outputs': [
            { 'internalType': 'string', 'name': '', 'type': 'string',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [], 'name': 'totalSupply', 'outputs': [
            { 'internalType': 'uint256', 'name': '', 'type': 'uint256',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'from', 'type': 'address',
            },
            { 'internalType': 'address', 'name': 'to', 'type': 'address',
            },
            { 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
        ], 'name': 'transferFrom', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'newOwner', 'type': 'address',
            },
        ], 'name': 'transferOwnership', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint48', 'name': '', 'type': 'uint48',
            },
        ], 'name': 'treeNode', 'outputs': [
            { 'internalType': 'uint64', 'name': 'updateId', 'type': 'uint64',
            },
            { 'internalType': 'uint128', 'name': 'amount', 'type': 'uint128',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
            { 'internalType': 'enum ILP.CoreState', 'name': 'state', 'type': 'uint8',
            },
            { 'internalType': 'uint64', 'name': 'reinforcementAbility', 'type': 'uint64',
            },
            { 'internalType': 'uint128', 'name': 'minBet', 'type': 'uint128',
            },
        ], 'name': 'updateCoreSettings', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [], 'name': 'updateId', 'outputs': [
            { 'internalType': 'uint64', 'name': '', 'type': 'uint64',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
            { 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
        ], 'name': 'viewPayout', 'outputs': [
            { 'internalType': 'uint128', 'name': '', 'type': 'uint128',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint48', 'name': '', 'type': 'uint48',
            },
        ], 'name': 'withdrawAfter', 'outputs': [
            { 'internalType': 'uint64', 'name': '', 'type': 'uint64',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'uint48', 'name': 'depositId', 'type': 'uint48',
            },
            { 'internalType': 'uint40', 'name': 'percent', 'type': 'uint40',
            },
        ], 'name': 'withdrawLiquidity', 'outputs': [
            { 'internalType': 'uint128', 'name': 'withdrawnAmount', 'type': 'uint128',
            },
        ], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [
            { 'internalType': 'address', 'name': 'core', 'type': 'address',
            },
            { 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256',
            },
        ], 'name': 'withdrawPayout', 'outputs': [
            { 'internalType': 'uint128', 'name': 'amount', 'type': 'uint128',
            },
        ], 'stateMutability': 'nonpayable', 'type': 'function',
    },
    { 'inputs': [], 'name': 'withdrawTimeout', 'outputs': [
            { 'internalType': 'uint64', 'name': '', 'type': 'uint64',
            },
        ], 'stateMutability': 'view', 'type': 'function',
    },
    { 'stateMutability': 'payable', 'type': 'receive',
    },
];var liveCoreAbi = [
    {
        'inputs': [],
        'stateMutability': 'nonpayable',
        'type': 'constructor',
    },
    {
        'inputs': [],
        'name': 'AlreadyPaid',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'BetNotExists',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'ConditionAlreadyResolved',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'ConditionNotFinished',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'ConditionNotRunning',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'uint64',
                'name': 'outcome',
                'type': 'uint64',
            },
        ],
        'name': 'DuplicateOutcomes',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectAffiliate',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectAmount',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectConditionIds',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectCore',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectOdds',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectSettleDate',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectWinningOutcomesCount',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'InvalidBettorSignature',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'InvalidChainId',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'InvalidNonce',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'InvalidOracleSignature',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'OnlyLp',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
        ],
        'name': 'OnlyOracle',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'PayoutLimit',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'enum SafeCast.Type',
                'name': 'to',
                'type': 'uint8',
            },
        ],
        'name': 'SafeCastError',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'SignatureExpired',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'SmallOdds',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'WrongOutcome',
        'type': 'error',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'gameId',
                'type': 'uint256',
            },
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint64[]',
                'name': 'outcomes',
                'type': 'uint64[]',
            },
            {
                'indexed': false,
                'internalType': 'uint256[]',
                'name': 'odds',
                'type': 'uint256[]',
            },
            {
                'indexed': false,
                'internalType': 'uint8',
                'name': 'winningOutcomesCount',
                'type': 'uint8',
            },
        ],
        'name': 'ConditionCreated',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint8',
                'name': 'state',
                'type': 'uint8',
            },
            {
                'indexed': false,
                'internalType': 'uint64[]',
                'name': 'winningOutcomes',
                'type': 'uint64[]',
            },
            {
                'indexed': false,
                'internalType': 'int128',
                'name': 'lpProfit',
                'type': 'int128',
            },
            {
                'indexed': false,
                'internalType': 'uint64',
                'name': 'settledAt',
                'type': 'uint64',
            },
        ],
        'name': 'ConditionResolved',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': false,
                'internalType': 'uint8',
                'name': 'version',
                'type': 'uint8',
            },
        ],
        'name': 'Initialized',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'bettor',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'affiliate',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint64',
                'name': 'outcomeId',
                'type': 'uint64',
            },
            {
                'indexed': false,
                'internalType': 'uint256',
                'name': 'nonce',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint128',
                'name': 'amount',
                'type': 'uint128',
            },
            {
                'indexed': false,
                'internalType': 'uint64',
                'name': 'odds',
                'type': 'uint64',
            },
            {
                'indexed': false,
                'internalType': 'uint128',
                'name': 'payoutLimit',
                'type': 'uint128',
            },
        ],
        'name': 'NewLiveBet',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'previousOwner',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'newOwner',
                'type': 'address',
            },
        ],
        'name': 'OwnershipTransferred',
        'type': 'event',
    },
    {
        'inputs': [],
        'name': 'MAX_OUTCOMES_COUNT',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'azuroBet',
        'outputs': [
            {
                'internalType': 'contract IAzuroBet',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'bets',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint128',
                'name': 'amount',
                'type': 'uint128',
            },
            {
                'internalType': 'uint128',
                'name': 'payout',
                'type': 'uint128',
            },
            {
                'internalType': 'uint64',
                'name': 'outcome',
                'type': 'uint64',
            },
            {
                'internalType': 'uint64',
                'name': 'timestamp',
                'type': 'uint64',
            },
            {
                'internalType': 'bool',
                'name': 'isPaid',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256[]',
                'name': 'conditionIds',
                'type': 'uint256[]',
            },
        ],
        'name': 'cancelConditions',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'account',
                'type': 'address',
            },
        ],
        'name': 'checkOwner',
        'outputs': [],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'conditions',
        'outputs': [
            {
                'internalType': 'int128',
                'name': 'maxReserved',
                'type': 'int128',
            },
            {
                'internalType': 'uint128',
                'name': 'totalNetBets',
                'type': 'uint128',
            },
            {
                'internalType': 'uint64',
                'name': 'settledAt',
                'type': 'uint64',
            },
            {
                'internalType': 'uint48',
                'name': 'lastDepositId',
                'type': 'uint48',
            },
            {
                'internalType': 'uint8',
                'name': 'winningOutcomesCount',
                'type': 'uint8',
            },
            {
                'internalType': 'enum IConditionState.ConditionState',
                'name': 'state',
                'type': 'uint8',
            },
            {
                'internalType': 'address',
                'name': 'oracle',
                'type': 'address',
            },
            {
                'internalType': 'bool',
                'name': 'isExpressForbidden',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
        ],
        'name': 'getCondition',
        'outputs': [
            {
                'components': [
                    {
                        'internalType': 'int128',
                        'name': 'maxReserved',
                        'type': 'int128',
                    },
                    {
                        'internalType': 'uint128[]',
                        'name': 'payouts',
                        'type': 'uint128[]',
                    },
                    {
                        'internalType': 'uint128',
                        'name': 'totalNetBets',
                        'type': 'uint128',
                    },
                    {
                        'internalType': 'uint64',
                        'name': 'settledAt',
                        'type': 'uint64',
                    },
                    {
                        'internalType': 'uint48',
                        'name': 'lastDepositId',
                        'type': 'uint48',
                    },
                    {
                        'internalType': 'uint8',
                        'name': 'winningOutcomesCount',
                        'type': 'uint8',
                    },
                    {
                        'internalType': 'enum IConditionState.ConditionState',
                        'name': 'state',
                        'type': 'uint8',
                    },
                    {
                        'internalType': 'address',
                        'name': 'oracle',
                        'type': 'address',
                    },
                    {
                        'internalType': 'bool',
                        'name': 'isExpressForbidden',
                        'type': 'bool',
                    },
                ],
                'internalType': 'struct IClientCondition.Condition',
                'name': '',
                'type': 'tuple',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint64',
                'name': 'outcome',
                'type': 'uint64',
            },
        ],
        'name': 'getOutcomeIndex',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'azuroBet_',
                'type': 'address',
            },
            {
                'internalType': 'address',
                'name': 'lp_',
                'type': 'address',
            },
        ],
        'name': 'initialize',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
        ],
        'name': 'isConditionCanceled',
        'outputs': [
            {
                'internalType': 'bool',
                'name': '',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint64',
                'name': 'outcome',
                'type': 'uint64',
            },
        ],
        'name': 'isOutcomeWinning',
        'outputs': [
            {
                'internalType': 'bool',
                'name': '',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'lp',
        'outputs': [
            {
                'internalType': 'contract ILP',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'nonces',
        'outputs': [
            {
                'internalType': 'bool',
                'name': '',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'outcomeNumbers',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'owner',
        'outputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'bettor',
                'type': 'address',
            },
            {
                'internalType': 'uint128',
                'name': 'amount',
                'type': 'uint128',
            },
            {
                'components': [
                    {
                        'internalType': 'address',
                        'name': 'affiliate',
                        'type': 'address',
                    },
                    {
                        'internalType': 'uint64',
                        'name': 'minOdds',
                        'type': 'uint64',
                    },
                    {
                        'internalType': 'bytes',
                        'name': 'data',
                        'type': 'bytes',
                    },
                ],
                'internalType': 'struct IBet.BetData',
                'name': 'betData',
                'type': 'tuple',
            },
        ],
        'name': 'putBet',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'components': [
                    {
                        'internalType': 'uint256',
                        'name': 'conditionId',
                        'type': 'uint256',
                    },
                    {
                        'internalType': 'uint64[]',
                        'name': 'winningOutcomes',
                        'type': 'uint64[]',
                    },
                    {
                        'internalType': 'uint64',
                        'name': 'settledAt',
                        'type': 'uint64',
                    },
                ],
                'internalType': 'struct IClientCoreBase.ResolveData[]',
                'name': 'data',
                'type': 'tuple[]',
            },
        ],
        'name': 'resolveConditions',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'resolvePayout',
        'outputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
            {
                'internalType': 'uint128',
                'name': '',
                'type': 'uint128',
            },
        ],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'snapshotTimes',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'snapshots',
        'outputs': [
            {
                'internalType': 'uint128',
                'name': 'totalNetBets',
                'type': 'uint128',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'newOwner',
                'type': 'address',
            },
        ],
        'name': 'transferOwnership',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'viewPayout',
        'outputs': [
            {
                'internalType': 'uint128',
                'name': '',
                'type': 'uint128',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'winningOutcomes',
        'outputs': [
            {
                'internalType': 'bool',
                'name': '',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
];var prematchComboCoreAbi = [
    {
        'inputs': [],
        'name': 'AlreadyPaid',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'BetNotExists',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
        ],
        'name': 'ConditionNotFinished',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
        ],
        'name': 'ConditionNotRunning',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectMaxOdds',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectOdds',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'LargeOdds',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'OnlyLp',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'enum SafeCast.Type',
                'name': 'to',
                'type': 'uint8',
            },
        ],
        'name': 'SafeCastError',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'SameGameIdsNotAllowed',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'SmallOdds',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'TooFewSubbets',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
        ],
        'name': 'TooLargeReinforcement',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'WrongToken',
        'type': 'error',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'owner',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'approved',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'Approval',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'owner',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'operator',
                'type': 'address',
            },
            {
                'indexed': false,
                'internalType': 'bool',
                'name': 'approved',
                'type': 'bool',
            },
        ],
        'name': 'ApprovalForAll',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': false,
                'internalType': 'uint8',
                'name': 'version',
                'type': 'uint8',
            },
        ],
        'name': 'Initialized',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': false,
                'internalType': 'uint256',
                'name': 'newMaxOdds',
                'type': 'uint256',
            },
        ],
        'name': 'MaxOddsChanged',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'bettor',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'affiliate',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'betId',
                'type': 'uint256',
            },
            {
                'components': [
                    {
                        'internalType': 'uint64',
                        'name': 'odds',
                        'type': 'uint64',
                    },
                    {
                        'internalType': 'uint128',
                        'name': 'amount',
                        'type': 'uint128',
                    },
                    {
                        'internalType': 'uint48',
                        'name': 'lastDepositId',
                        'type': 'uint48',
                    },
                    {
                        'internalType': 'bool',
                        'name': 'isClaimed',
                        'type': 'bool',
                    },
                    {
                        'components': [
                            {
                                'internalType': 'uint256',
                                'name': 'conditionId',
                                'type': 'uint256',
                            },
                            {
                                'internalType': 'uint64',
                                'name': 'outcomeId',
                                'type': 'uint64',
                            },
                        ],
                        'internalType': 'struct ICoreBase.CoreBetData[]',
                        'name': 'subBets',
                        'type': 'tuple[]',
                    },
                    {
                        'internalType': 'uint64[]',
                        'name': 'conditionOdds',
                        'type': 'uint64[]',
                    },
                ],
                'indexed': false,
                'internalType': 'struct IBetExpress.Bet',
                'name': 'bet',
                'type': 'tuple',
            },
        ],
        'name': 'NewBet',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'previousOwner',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'newOwner',
                'type': 'address',
            },
        ],
        'name': 'OwnershipTransferred',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': false,
                'internalType': 'uint128',
                'name': 'newReinforcement',
                'type': 'uint128',
            },
        ],
        'name': 'ReinforcementChanged',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'from',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'to',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'Transfer',
        'type': 'event',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'to',
                'type': 'address',
            },
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'approve',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'owner',
                'type': 'address',
            },
        ],
        'name': 'balanceOf',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'baseURI',
        'outputs': [
            {
                'internalType': 'string',
                'name': '',
                'type': 'string',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'components': [
                    {
                        'internalType': 'uint256',
                        'name': 'conditionId',
                        'type': 'uint256',
                    },
                    {
                        'internalType': 'uint64',
                        'name': 'outcomeId',
                        'type': 'uint64',
                    },
                ],
                'internalType': 'struct ICoreBase.CoreBetData[]',
                'name': 'subBets',
                'type': 'tuple[]',
            },
            {
                'internalType': 'uint128',
                'name': 'amount',
                'type': 'uint128',
            },
        ],
        'name': 'calcOdds',
        'outputs': [
            {
                'internalType': 'uint64[]',
                'name': 'conditionOdds',
                'type': 'uint64[]',
            },
            {
                'internalType': 'uint256',
                'name': 'expressOdds',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'calcPayout',
        'outputs': [
            {
                'internalType': 'uint128',
                'name': '',
                'type': 'uint128',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'newMaxOdds',
                'type': 'uint256',
            },
        ],
        'name': 'changeMaxOdds',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint128',
                'name': 'newReinforcement',
                'type': 'uint128',
            },
        ],
        'name': 'changeReinforcement',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'account',
                'type': 'address',
            },
        ],
        'name': 'checkOwner',
        'outputs': [],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'core',
        'outputs': [
            {
                'internalType': 'contract ICoreBase',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'getApproved',
        'outputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'betId',
                'type': 'uint256',
            },
        ],
        'name': 'getBet',
        'outputs': [
            {
                'components': [
                    {
                        'internalType': 'uint64',
                        'name': 'odds',
                        'type': 'uint64',
                    },
                    {
                        'internalType': 'uint128',
                        'name': 'amount',
                        'type': 'uint128',
                    },
                    {
                        'internalType': 'uint48',
                        'name': 'lastDepositId',
                        'type': 'uint48',
                    },
                    {
                        'internalType': 'bool',
                        'name': 'isClaimed',
                        'type': 'bool',
                    },
                    {
                        'components': [
                            {
                                'internalType': 'uint256',
                                'name': 'conditionId',
                                'type': 'uint256',
                            },
                            {
                                'internalType': 'uint64',
                                'name': 'outcomeId',
                                'type': 'uint64',
                            },
                        ],
                        'internalType': 'struct ICoreBase.CoreBetData[]',
                        'name': 'subBets',
                        'type': 'tuple[]',
                    },
                    {
                        'internalType': 'uint64[]',
                        'name': 'conditionOdds',
                        'type': 'uint64[]',
                    },
                ],
                'internalType': 'struct IBetExpress.Bet',
                'name': 'betInfo',
                'type': 'tuple',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'lp_',
                'type': 'address',
            },
            {
                'internalType': 'address',
                'name': 'core_',
                'type': 'address',
            },
        ],
        'name': 'initialize',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'owner',
                'type': 'address',
            },
            {
                'internalType': 'address',
                'name': 'operator',
                'type': 'address',
            },
        ],
        'name': 'isApprovedForAll',
        'outputs': [
            {
                'internalType': 'bool',
                'name': '',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'lastBetId',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'lockedReserves',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'lp',
        'outputs': [
            {
                'internalType': 'contract ILP',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'maxOdds',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'name',
        'outputs': [
            {
                'internalType': 'string',
                'name': '',
                'type': 'string',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'owner',
        'outputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'ownerOf',
        'outputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'bettor',
                'type': 'address',
            },
            {
                'internalType': 'uint128',
                'name': 'amount',
                'type': 'uint128',
            },
            {
                'components': [
                    {
                        'internalType': 'address',
                        'name': 'affiliate',
                        'type': 'address',
                    },
                    {
                        'internalType': 'uint64',
                        'name': 'minOdds',
                        'type': 'uint64',
                    },
                    {
                        'internalType': 'bytes',
                        'name': 'data',
                        'type': 'bytes',
                    },
                ],
                'internalType': 'struct IBet.BetData',
                'name': 'betData',
                'type': 'tuple',
            },
        ],
        'name': 'putBet',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': 'betId',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'reinforcement',
        'outputs': [
            {
                'internalType': 'uint128',
                'name': '',
                'type': 'uint128',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'resolvePayout',
        'outputs': [
            {
                'internalType': 'address',
                'name': 'account',
                'type': 'address',
            },
            {
                'internalType': 'uint128',
                'name': 'payout',
                'type': 'uint128',
            },
        ],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'from',
                'type': 'address',
            },
            {
                'internalType': 'address',
                'name': 'to',
                'type': 'address',
            },
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'safeTransferFrom',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'from',
                'type': 'address',
            },
            {
                'internalType': 'address',
                'name': 'to',
                'type': 'address',
            },
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
            {
                'internalType': 'bytes',
                'name': 'data',
                'type': 'bytes',
            },
        ],
        'name': 'safeTransferFrom',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'operator',
                'type': 'address',
            },
            {
                'internalType': 'bool',
                'name': 'approved',
                'type': 'bool',
            },
        ],
        'name': 'setApprovalForAll',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'string',
                'name': 'uri',
                'type': 'string',
            },
        ],
        'name': 'setBaseURI',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'bytes4',
                'name': 'interfaceId',
                'type': 'bytes4',
            },
        ],
        'name': 'supportsInterface',
        'outputs': [
            {
                'internalType': 'bool',
                'name': '',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'symbol',
        'outputs': [
            {
                'internalType': 'string',
                'name': '',
                'type': 'string',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'tokenURI',
        'outputs': [
            {
                'internalType': 'string',
                'name': '',
                'type': 'string',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'from',
                'type': 'address',
            },
            {
                'internalType': 'address',
                'name': 'to',
                'type': 'address',
            },
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'transferFrom',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'newOwner',
                'type': 'address',
            },
        ],
        'name': 'transferOwnership',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'viewPayout',
        'outputs': [
            {
                'internalType': 'uint128',
                'name': '',
                'type': 'uint128',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
];var prematchCoreAbi = [
    {
        'inputs': [],
        'name': 'AlreadyPaid',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'BetNotExists',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'CantChangeFlag',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'ConditionAlreadyCreated',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'ConditionAlreadyResolved',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'ConditionNotExists',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'ConditionNotFinished',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'ConditionNotRunning',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'uint64',
                'name': 'outcome',
                'type': 'uint64',
            },
        ],
        'name': 'DuplicateOutcomes',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'GameAlreadyStarted',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectConditionId',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectMargin',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectOdds',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectOutcomesCount',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectReinforcement',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectTimestamp',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'IncorrectWinningOutcomesCount',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'InsufficientFund',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'NoPendingReward',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'NothingChanged',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'OnlyLp',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
        ],
        'name': 'OnlyOracle',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'OutcomesAndOddsCountDiffer',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'uint64',
                'name': 'waitTime',
                'type': 'uint64',
            },
        ],
        'name': 'ResolveTooEarly',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'enum SafeCast.Type',
                'name': 'to',
                'type': 'uint8',
            },
        ],
        'name': 'SafeCastError',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'SmallOdds',
        'type': 'error',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'pendingRewardsCount',
                'type': 'uint256',
            },
        ],
        'name': 'StartOutOfRange',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'WrongOutcome',
        'type': 'error',
    },
    {
        'inputs': [],
        'name': 'ZeroOdds',
        'type': 'error',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'gameId',
                'type': 'uint256',
            },
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint64[]',
                'name': 'outcomes',
                'type': 'uint64[]',
            },
        ],
        'name': 'ConditionCreated',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint8',
                'name': 'state',
                'type': 'uint8',
            },
            {
                'indexed': false,
                'internalType': 'uint64[]',
                'name': 'winningOutcomes',
                'type': 'uint64[]',
            },
            {
                'indexed': false,
                'internalType': 'int128',
                'name': 'lpProfit',
                'type': 'int128',
            },
        ],
        'name': 'ConditionResolved',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'bool',
                'name': 'flag',
                'type': 'bool',
            },
        ],
        'name': 'ConditionStopped',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': false,
                'internalType': 'uint8',
                'name': 'version',
                'type': 'uint8',
            },
        ],
        'name': 'Initialized',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint64',
                'name': 'newMargin',
                'type': 'uint64',
            },
        ],
        'name': 'MarginChanged',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'bettor',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'affiliate',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint64',
                'name': 'outcomeId',
                'type': 'uint64',
            },
            {
                'indexed': false,
                'internalType': 'uint128',
                'name': 'amount',
                'type': 'uint128',
            },
            {
                'indexed': false,
                'internalType': 'uint256',
                'name': 'odds',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint128[]',
                'name': 'funds',
                'type': 'uint128[]',
            },
        ],
        'name': 'NewBet',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint256[]',
                'name': 'newOdds',
                'type': 'uint256[]',
            },
        ],
        'name': 'OddsChanged',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'previousOwner',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'newOwner',
                'type': 'address',
            },
        ],
        'name': 'OwnershipTransferred',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'indexed': false,
                'internalType': 'uint128',
                'name': 'newReinforcement',
                'type': 'uint128',
            },
        ],
        'name': 'ReinforcementChanged',
        'type': 'event',
    },
    {
        'inputs': [],
        'name': 'MAX_OUTCOMES_COUNT',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'azuroBet',
        'outputs': [
            {
                'internalType': 'contract IAzuroBet',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'bets',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint128',
                'name': 'amount',
                'type': 'uint128',
            },
            {
                'internalType': 'uint128',
                'name': 'payout',
                'type': 'uint128',
            },
            {
                'internalType': 'uint64',
                'name': 'outcome',
                'type': 'uint64',
            },
            {
                'internalType': 'bool',
                'name': 'isPaid',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint128',
                'name': 'amount',
                'type': 'uint128',
            },
            {
                'internalType': 'uint64',
                'name': 'outcome',
                'type': 'uint64',
            },
        ],
        'name': 'calcOdds',
        'outputs': [
            {
                'internalType': 'uint64',
                'name': 'odds',
                'type': 'uint64',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
        ],
        'name': 'cancelCondition',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint64',
                'name': 'newMargin',
                'type': 'uint64',
            },
        ],
        'name': 'changeMargin',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint256[]',
                'name': 'newOdds',
                'type': 'uint256[]',
            },
        ],
        'name': 'changeOdds',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint128',
                'name': 'newReinforcement',
                'type': 'uint128',
            },
        ],
        'name': 'changeReinforcement',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'account',
                'type': 'address',
            },
        ],
        'name': 'checkOwner',
        'outputs': [],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'conditions',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': 'gameId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint128',
                'name': 'totalNetBets',
                'type': 'uint128',
            },
            {
                'internalType': 'uint128',
                'name': 'reinforcement',
                'type': 'uint128',
            },
            {
                'internalType': 'uint128',
                'name': 'fund',
                'type': 'uint128',
            },
            {
                'internalType': 'uint64',
                'name': 'margin',
                'type': 'uint64',
            },
            {
                'internalType': 'uint64',
                'name': 'endsAt',
                'type': 'uint64',
            },
            {
                'internalType': 'uint48',
                'name': 'lastDepositId',
                'type': 'uint48',
            },
            {
                'internalType': 'uint8',
                'name': 'winningOutcomesCount',
                'type': 'uint8',
            },
            {
                'internalType': 'enum ICondition.ConditionState',
                'name': 'state',
                'type': 'uint8',
            },
            {
                'internalType': 'address',
                'name': 'oracle',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'gameId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint256[]',
                'name': 'odds',
                'type': 'uint256[]',
            },
            {
                'internalType': 'uint64[]',
                'name': 'outcomes',
                'type': 'uint64[]',
            },
            {
                'internalType': 'uint128',
                'name': 'reinforcement',
                'type': 'uint128',
            },
            {
                'internalType': 'uint64',
                'name': 'margin',
                'type': 'uint64',
            },
            {
                'internalType': 'uint8',
                'name': 'winningOutcomesCount',
                'type': 'uint8',
            },
        ],
        'name': 'createCondition',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
        ],
        'name': 'getCondition',
        'outputs': [
            {
                'components': [
                    {
                        'internalType': 'uint256',
                        'name': 'gameId',
                        'type': 'uint256',
                    },
                    {
                        'internalType': 'uint128[]',
                        'name': 'payouts',
                        'type': 'uint128[]',
                    },
                    {
                        'internalType': 'uint128[]',
                        'name': 'virtualFunds',
                        'type': 'uint128[]',
                    },
                    {
                        'internalType': 'uint128',
                        'name': 'totalNetBets',
                        'type': 'uint128',
                    },
                    {
                        'internalType': 'uint128',
                        'name': 'reinforcement',
                        'type': 'uint128',
                    },
                    {
                        'internalType': 'uint128',
                        'name': 'fund',
                        'type': 'uint128',
                    },
                    {
                        'internalType': 'uint64',
                        'name': 'margin',
                        'type': 'uint64',
                    },
                    {
                        'internalType': 'uint64',
                        'name': 'endsAt',
                        'type': 'uint64',
                    },
                    {
                        'internalType': 'uint48',
                        'name': 'lastDepositId',
                        'type': 'uint48',
                    },
                    {
                        'internalType': 'uint8',
                        'name': 'winningOutcomesCount',
                        'type': 'uint8',
                    },
                    {
                        'internalType': 'enum ICondition.ConditionState',
                        'name': 'state',
                        'type': 'uint8',
                    },
                    {
                        'internalType': 'address',
                        'name': 'oracle',
                        'type': 'address',
                    },
                ],
                'internalType': 'struct ICondition.Condition',
                'name': '',
                'type': 'tuple',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint64',
                'name': 'outcome',
                'type': 'uint64',
            },
        ],
        'name': 'getOutcomeIndex',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'azuroBet_',
                'type': 'address',
            },
            {
                'internalType': 'address',
                'name': 'lp_',
                'type': 'address',
            },
        ],
        'name': 'initialize',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
        ],
        'name': 'isConditionCanceled',
        'outputs': [
            {
                'internalType': 'bool',
                'name': '',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint64',
                'name': 'outcome',
                'type': 'uint64',
            },
        ],
        'name': 'isOutcomeWinning',
        'outputs': [
            {
                'internalType': 'bool',
                'name': '',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'lp',
        'outputs': [
            {
                'internalType': 'contract ILP',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'outcomeNumbers',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'owner',
        'outputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'bettor',
                'type': 'address',
            },
            {
                'internalType': 'uint128',
                'name': 'amount',
                'type': 'uint128',
            },
            {
                'components': [
                    {
                        'internalType': 'address',
                        'name': 'affiliate',
                        'type': 'address',
                    },
                    {
                        'internalType': 'uint64',
                        'name': 'minOdds',
                        'type': 'uint64',
                    },
                    {
                        'internalType': 'bytes',
                        'name': 'data',
                        'type': 'bytes',
                    },
                ],
                'internalType': 'struct IBet.BetData',
                'name': 'betData',
                'type': 'tuple',
            },
        ],
        'name': 'putBet',
        'outputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'uint64[]',
                'name': 'winningOutcomes_',
                'type': 'uint64[]',
            },
        ],
        'name': 'resolveCondition',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'resolvePayout',
        'outputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
            {
                'internalType': 'uint128',
                'name': '',
                'type': 'uint128',
            },
        ],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'conditionId',
                'type': 'uint256',
            },
            {
                'internalType': 'bool',
                'name': 'flag',
                'type': 'bool',
            },
        ],
        'name': 'stopCondition',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'newOwner',
                'type': 'address',
            },
        ],
        'name': 'transferOwnership',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': 'tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'viewPayout',
        'outputs': [
            {
                'internalType': 'uint128',
                'name': '',
                'type': 'uint128',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
            {
                'internalType': 'uint256',
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'winningOutcomes',
        'outputs': [
            {
                'internalType': 'bool',
                'name': '',
                'type': 'bool',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
];var proxyFrontAbi = [
    {
        'inputs': [],
        'stateMutability': 'nonpayable',
        'type': 'constructor',
    },
    {
        'inputs': [],
        'name': 'IncorrectValue',
        'type': 'error',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': false,
                'internalType': 'uint8',
                'name': 'version',
                'type': 'uint8',
            },
        ],
        'name': 'Initialized',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'previousOwner',
                'type': 'address',
            },
            {
                'indexed': true,
                'internalType': 'address',
                'name': 'newOwner',
                'type': 'address',
            },
        ],
        'name': 'OwnershipTransferred',
        'type': 'event',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'lp',
                'type': 'address',
            },
            {
                'components': [
                    {
                        'internalType': 'address',
                        'name': 'core',
                        'type': 'address',
                    },
                    {
                        'internalType': 'uint128',
                        'name': 'amount',
                        'type': 'uint128',
                    },
                    {
                        'internalType': 'uint64',
                        'name': 'expiresAt',
                        'type': 'uint64',
                    },
                    {
                        'components': [
                            {
                                'internalType': 'address',
                                'name': 'affiliate',
                                'type': 'address',
                            },
                            {
                                'internalType': 'uint64',
                                'name': 'minOdds',
                                'type': 'uint64',
                            },
                            {
                                'internalType': 'bytes',
                                'name': 'data',
                                'type': 'bytes',
                            },
                        ],
                        'internalType': 'struct IBet.BetData',
                        'name': 'extraData',
                        'type': 'tuple',
                    },
                ],
                'internalType': 'struct IProxyFront.BetData[]',
                'name': 'data',
                'type': 'tuple[]',
            },
        ],
        'name': 'bet',
        'outputs': [],
        'stateMutability': 'payable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'account',
                'type': 'address',
            },
        ],
        'name': 'checkOwner',
        'outputs': [],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'initialize',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [],
        'name': 'owner',
        'outputs': [
            {
                'internalType': 'address',
                'name': '',
                'type': 'address',
            },
        ],
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'internalType': 'address',
                'name': 'newOwner',
                'type': 'address',
            },
        ],
        'name': 'transferOwnership',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'components': [
                    {
                        'internalType': 'address',
                        'name': 'core',
                        'type': 'address',
                    },
                    {
                        'internalType': 'uint256',
                        'name': 'tokenId',
                        'type': 'uint256',
                    },
                ],
                'internalType': 'struct IProxyFront.WithdrawPayoutData[]',
                'name': 'data',
                'type': 'tuple[]',
            },
        ],
        'name': 'withdrawPayouts',
        'outputs': [],
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'stateMutability': 'payable',
        'type': 'receive',
    },
];var FreeBet = [{ 'inputs': [], 'name': 'AlreadyResolved', 'type': 'error' }, { 'inputs': [], 'name': 'BetAlreadyClaimed', 'type': 'error' }, { 'inputs': [], 'name': 'BetExpired', 'type': 'error' }, { 'inputs': [], 'name': 'IncorrectChainId', 'type': 'error' }, { 'inputs': [], 'name': 'InsufficientContractBalance', 'type': 'error' }, { 'inputs': [], 'name': 'InvalidSignature', 'type': 'error' }, { 'inputs': [], 'name': 'OnlyBetOwner', 'type': 'error' }, { 'inputs': [], 'name': 'OnlyFreeBetOwner', 'type': 'error' }, { 'inputs': [], 'name': 'OnlyManager', 'type': 'error' }, { 'inputs': [], 'name': 'SmallMinOdds', 'type': 'error' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'internalType': 'address', 'name': 'newAffiliate', 'type': 'address' }], 'name': 'AffiliateChanged', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': true, 'internalType': 'address', 'name': 'core', 'type': 'address' }, { 'indexed': true, 'internalType': 'address', 'name': 'bettor', 'type': 'address' }, { 'indexed': true, 'internalType': 'uint256', 'name': 'freeBetId', 'type': 'uint256' }, { 'indexed': false, 'internalType': 'uint256', 'name': 'amount', 'type': 'uint256' }], 'name': 'BettorWin', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'internalType': 'uint8', 'name': 'version', 'type': 'uint8' }], 'name': 'Initialized', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': true, 'internalType': 'address', 'name': 'newLp', 'type': 'address' }], 'name': 'LpChanged', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'internalType': 'address', 'name': 'newManager', 'type': 'address' }], 'name': 'ManagerChanged', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': true, 'internalType': 'uint256', 'name': 'freeBetId', 'type': 'uint256' }, { 'indexed': false, 'internalType': 'address', 'name': 'core', 'type': 'address' }, { 'indexed': true, 'internalType': 'address', 'name': 'bettor', 'type': 'address' }, { 'indexed': true, 'internalType': 'uint256', 'name': 'azuroBetId', 'type': 'uint256' }, { 'indexed': false, 'internalType': 'uint128', 'name': 'amount', 'type': 'uint128' }, { 'indexed': false, 'internalType': 'uint64', 'name': 'minOdds', 'type': 'uint64' }, { 'indexed': false, 'internalType': 'uint64', 'name': 'expiresAt', 'type': 'uint64' }], 'name': 'NewBet', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': true, 'internalType': 'address', 'name': 'previousOwner', 'type': 'address' }, { 'indexed': true, 'internalType': 'address', 'name': 'newOwner', 'type': 'address' }], 'name': 'OwnershipTransferred', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'internalType': 'uint256[]', 'name': 'azuroBetId', 'type': 'uint256[]' }], 'name': 'PayoutsResolved', 'type': 'event' }, { 'inputs': [], 'name': 'affiliate', 'outputs': [{ 'internalType': 'address', 'name': '', 'type': 'address' }], 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [{ 'components': [{ 'internalType': 'uint256', 'name': 'chainId', 'type': 'uint256' }, { 'internalType': 'uint256', 'name': 'freeBetId', 'type': 'uint256' }, { 'internalType': 'address', 'name': 'owner', 'type': 'address' }, { 'internalType': 'uint128', 'name': 'amount', 'type': 'uint128' }, { 'internalType': 'uint64', 'name': 'minOdds', 'type': 'uint64' }, { 'internalType': 'uint64', 'name': 'expiresAt', 'type': 'uint64' }], 'internalType': 'struct IFreeBet.FreeBetData', 'name': 'freeBetData', 'type': 'tuple' }, { 'internalType': 'bytes', 'name': 'signature', 'type': 'bytes' }, { 'internalType': 'address', 'name': 'core', 'type': 'address' }, { 'internalType': 'uint256', 'name': 'conditionId', 'type': 'uint256' }, { 'internalType': 'uint64', 'name': 'outcomeId', 'type': 'uint64' }, { 'internalType': 'uint64', 'name': 'deadline', 'type': 'uint64' }, { 'internalType': 'uint64', 'name': 'minOdds', 'type': 'uint64' }], 'name': 'bet', 'outputs': [{ 'internalType': 'uint256', 'name': 'azuroBetId', 'type': 'uint256' }], 'stateMutability': 'nonpayable', 'type': 'function' }, { 'inputs': [{ 'internalType': 'address', 'name': 'account', 'type': 'address' }], 'name': 'checkOwner', 'outputs': [], 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [{ 'internalType': 'uint256', 'name': '', 'type': 'uint256' }], 'name': 'freeBets', 'outputs': [{ 'internalType': 'address', 'name': 'owner', 'type': 'address' }, { 'internalType': 'address', 'name': 'core', 'type': 'address' }, { 'internalType': 'uint256', 'name': 'azuroBetId', 'type': 'uint256' }, { 'internalType': 'uint128', 'name': 'amount', 'type': 'uint128' }, { 'internalType': 'uint128', 'name': 'payout', 'type': 'uint128' }], 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [{ 'internalType': 'address', 'name': 'lpAddress', 'type': 'address' }, { 'internalType': 'address', 'name': 'affiliate_', 'type': 'address' }, { 'internalType': 'address', 'name': 'manager_', 'type': 'address' }], 'name': 'initialize', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function' }, { 'inputs': [], 'name': 'lockedReserve', 'outputs': [{ 'internalType': 'uint256', 'name': '', 'type': 'uint256' }], 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [], 'name': 'lp', 'outputs': [{ 'internalType': 'contract ILP', 'name': '', 'type': 'address' }], 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [], 'name': 'manager', 'outputs': [{ 'internalType': 'address', 'name': '', 'type': 'address' }], 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [], 'name': 'owner', 'outputs': [{ 'internalType': 'address', 'name': '', 'type': 'address' }], 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [{ 'internalType': 'uint256[]', 'name': 'freeBetIds', 'type': 'uint256[]' }], 'name': 'resolvePayout', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function' }, { 'inputs': [{ 'internalType': 'address', 'name': 'affiliate_', 'type': 'address' }], 'name': 'setAffiliate', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function' }, { 'inputs': [{ 'internalType': 'address', 'name': 'lp_', 'type': 'address' }], 'name': 'setLp', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function' }, { 'inputs': [{ 'internalType': 'address', 'name': 'manager_', 'type': 'address' }], 'name': 'setManager', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function' }, { 'inputs': [], 'name': 'token', 'outputs': [{ 'internalType': 'address', 'name': '', 'type': 'address' }], 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [{ 'internalType': 'address', 'name': 'newOwner', 'type': 'address' }], 'name': 'transferOwnership', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function' }, { 'inputs': [{ 'internalType': 'uint256', 'name': 'freeBetId', 'type': 'uint256' }], 'name': 'withdrawPayout', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function' }, { 'inputs': [{ 'internalType': 'uint256', 'name': 'amount', 'type': 'uint256' }], 'name': 'withdrawReserve', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function' }, { 'stateMutability': 'payable', 'type': 'receive' }];const setupContracts = ({ lp, prematchCore, prematchComboCore, proxyFront, liveRelayer, liveCore }) => {
    const contracts = {
        lp: {
            address: lp,
            abi: lpAbi,
        },
        prematchCore: {
            address: prematchCore,
            abi: prematchCoreAbi,
        },
        prematchComboCore: {
            address: prematchComboCore,
            abi: prematchComboCoreAbi,
        },
        proxyFront: {
            address: proxyFront,
            abi: proxyFrontAbi,
        },
    };
    if (liveRelayer) {
        contracts.liveRelayer = {
            address: liveRelayer,
        };
    }
    if (liveCore) {
        contracts.liveCore = {
            address: liveCore,
            abi: liveCoreAbi,
        };
    }
    return contracts;
};const endpointNameByChainId = {
    [gnosis.id]: 'gnosis',
    [polygon.id]: 'polygon',
    [polygonAmoy.id]: 'polygon-amoy-preprod',
    [chiliz.id]: 'chiliz',
    [spicy.id]: 'chiliz-spicy-dev',
};
if (isDevEnabled) {
    endpointNameByChainId[gnosis.id] = 'gnosis-dev';
    endpointNameByChainId[polygonAmoy.id] = 'polygon-amoy-dev';
}
const isDev = (chainId) => {
    return isDevEnabled && (chainId === polygonAmoy.id
        || chainId === gnosis.id
        || chainId === spicy.id);
};
const getPrematchGraphqlEndpoint = (chainId) => `https://thegraph.azuro.org/subgraphs/name/azuro-protocol/azuro-api-${endpointNameByChainId[chainId]}-v3`;
const getLiveGraphqlEndpoint = (chainId) => {
    if (isDev(chainId)) {
        return 'https://thegraph.azuro.org/subgraphs/name/azuro-protocol/azuro-api-live-data-feed-dev';
    }
    if (chainId === polygonAmoy.id) {
        return 'https://thegraph.azuro.org/subgraphs/name/azuro-protocol/azuro-api-live-data-feed-preprod';
    }
    return 'https://thegraph.azuro.org/subgraphs/name/azuro-protocol/azuro-api-live-data-feed';
};
const getSocketEndpoint = (chainId) => {
    if (isDev(chainId)) {
        return 'wss://dev-streams.azuro.org/v1/streams/conditions';
    }
    if (chainId === polygonAmoy.id) {
        return 'wss://preprod-streams.azuro.org/v1/streams/conditions';
    }
    return 'wss://streams.azuro.org/v1/streams/conditions';
};
const getApiEndpoint = (chainId) => {
    if (isDev(chainId)) {
        return 'https://dev-api.azuro.org/api/v1/public';
    }
    if (chainId === polygonAmoy.id) {
        return 'https://preprod-api.azuro.org/api/v1/public';
    }
    return 'https://api.azuro.org/api/v1/public';
};const ODDS_DECIMALS = 12;
const MARGIN_DECIMALS = 12;
const MIN_LIVE_BET_AMOUNT = 1;
const deBridgeUrl = 'https://api.dln.trade/v1.0';
const deBridgeTxUrl = 'https://stats-api.dln.trade/api';
const liveHostAddress = '0x67Fca88E2f5F2C33b86bFa4EccfCb8dCD6a56D17';
const liveSupportedChains = [polygon.id, gnosis.id, polygonAmoy.id];
const gnosisData = {
    chain: gnosis,
    graphql: {
        prematch: getPrematchGraphqlEndpoint(gnosis.id),
        live: getLiveGraphqlEndpoint(gnosis.id),
    },
    socket: getSocketEndpoint(gnosis.id),
    api: getApiEndpoint(gnosis.id),
    environment: environments[gnosis.id],
    contracts: setupContracts({
        lp: '0x204e7371Ade792c5C006fb52711c50a7efC843ed',
        prematchCore: '0x7f3F3f19c4e4015fd9Db2f22e653c766154091EF',
        prematchComboCore: '0xDbC3BE2DDB53e1a288F7b7a4d020F8056D3b0F7C',
        proxyFront: '0x3A1c6640daeAc3513726F06A9f03911CC1080251',
        liveRelayer: '0x936c02503A32aA23BCF7CFaF5c29100b0F93FCfe',
        liveCore: '0x0223ff7efca5aec919c471fa2eb44cda466f1500',
    }),
    betToken: {
        address: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',
        symbol: 'WXDAI',
        decimals: 18,
    },
};
const gnosisDevData = {
    chain: gnosis,
    graphql: {
        prematch: getPrematchGraphqlEndpoint(gnosis.id),
        live: getLiveGraphqlEndpoint(gnosis.id),
    },
    socket: getSocketEndpoint(gnosis.id),
    api: getApiEndpoint(gnosis.id),
    environment: environments[gnosis.id],
    contracts: setupContracts({
        lp: '0xe068Bf88317fA2eb3EAEcBfe1e486d8b2dDe7761',
        prematchCore: '0x0eaa5283990af9ca915b1d82261663d25d039d03',
        prematchComboCore: '0xdab6c085e2a24d3417875ea154c1d0abb5d427f9',
        proxyFront: '0xB02205C9e5DdFFa3EEa2731fE76e505B0d3eCCb0',
        liveRelayer: '0x3B0213eB35735A8E2b19F13C5Ec0a65a8226D5B2',
        liveCore: '0xFc4910f0E7523063f3640e249Fc0f25542b76899',
    }),
    betToken: {
        address: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',
        symbol: 'WXDAI',
        decimals: 18,
    },
};
const polygonData = {
    chain: polygon,
    graphql: {
        prematch: getPrematchGraphqlEndpoint(polygon.id),
        live: getLiveGraphqlEndpoint(polygon.id),
    },
    socket: getSocketEndpoint(polygon.id),
    api: getApiEndpoint(polygon.id),
    environment: environments[polygon.id],
    contracts: setupContracts({
        lp: '0x7043E4e1c4045424858ECBCED80989FeAfC11B36',
        prematchCore: '0xA40F8D69D412b79b49EAbdD5cf1b5706395bfCf7',
        prematchComboCore: '0x92a4e8Bc6B92a2e1ced411f41013B5FE6BE07613',
        proxyFront: '0x0DEE52b98ba8326DaD4C346a4F806Fd871360a00',
        liveRelayer: '0xC6BB817a7f02874F360d135D880200A2E440207D',
        liveCore: '0xc389558Faca41bC747F763cf8616704187CDcD04',
    }),
    betToken: {
        address: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f',
        symbol: 'USDT',
        decimals: 6,
    },
};
const polygonAmoyData = {
    chain: polygonAmoy,
    graphql: {
        prematch: getPrematchGraphqlEndpoint(polygonAmoy.id),
        live: getLiveGraphqlEndpoint(polygonAmoy.id),
    },
    socket: getSocketEndpoint(polygonAmoy.id),
    api: getApiEndpoint(polygonAmoy.id),
    environment: environments[polygonAmoy.id],
    contracts: setupContracts({
        lp: '0x3528186476FD0eA0AdC9fCcc41de4CD138f99653',
        prematchCore: '0x2477B960080B3439b4684df3D9CE53B2ACe64315',
        prematchComboCore: '0xdF71998f7931caD24439A12A2F56D7326C3D0295',
        proxyFront: '0x7003CaA0847CA296EBF51C43D9021656a663304f',
        liveRelayer: '0x355B8493380fA5D57E4d3aFBF7C5f38b64AD5eA9',
        liveCore: '0x51eD5C2596d9AE32cE53ac1915Cb9333AFeF3156',
    }),
    betToken: {
        address: '0xf028b2dd00e20a8d9db3964a5feb0633d2ee46cd',
        symbol: 'AZUSD',
        decimals: 6,
    },
};
const polygonAmoyDevData = {
    chain: polygonAmoy,
    graphql: {
        prematch: getPrematchGraphqlEndpoint(polygonAmoy.id),
        live: getLiveGraphqlEndpoint(polygonAmoy.id),
    },
    socket: getSocketEndpoint(polygonAmoy.id),
    api: getApiEndpoint(polygonAmoy.id),
    environment: environments[polygonAmoy.id],
    contracts: setupContracts({
        lp: '0xDAa095204aCc244020F8f8e915f36533150ACF4b',
        prematchCore: '0x87EBFFe283bE8dEd47c3C87451d1B89c8a2C441A',
        prematchComboCore: '0x471DaC1052248602fdF05377EF99B5b7b3a769a1',
        proxyFront: '0x7003CaA0847CA296EBF51C43D9021656a663304f',
        liveRelayer: '0x38633e7Cbd86959453445C170168855ed1151C22',
        liveCore: '0x00232f2dEEae4541da1C5eC265193C879B2304Eb',
    }),
    betToken: {
        address: '0x683026Eb1b912795E4Eb1e73Da7e38C3F2f830c4',
        symbol: 'USDT',
        decimals: 6,
    },
};
const chilizData = {
    chain: chiliz,
    graphql: {
        prematch: getPrematchGraphqlEndpoint(chiliz.id),
        live: getLiveGraphqlEndpoint(chiliz.id),
    },
    socket: getSocketEndpoint(chiliz.id),
    api: getApiEndpoint(chiliz.id),
    environment: environments[chiliz.id],
    contracts: setupContracts({
        lp: '0x6909eAD2a1DA7b632D5993d329DEf4d2dbBc8261',
        prematchCore: '0x1a21C681Cc83889f4b213485aB6cF4971C43114B',
        prematchComboCore: '0x724fa8931428D5B636F7191d3e848f28Ab23C425',
        proxyFront: '0x45779134E5091756601Cb5bA389f9C76b914E520',
    }),
    betToken: {
        address: '0x677F7e16C7Dd57be1D4C8aD1244883214953DC47',
        symbol: 'WCHZ',
        decimals: 18,
    },
};
const spicyData = {
    chain: spicy,
    graphql: {
        prematch: getPrematchGraphqlEndpoint(spicy.id),
        live: getLiveGraphqlEndpoint(spicy.id),
    },
    socket: getSocketEndpoint(spicy.id),
    api: getApiEndpoint(spicy.id),
    environment: environments[spicy.id],
    contracts: setupContracts({
        lp: '0x82f25d2670994b218b8a4C1e5Acc120D6c27d786',
        prematchCore: '0x035AB843C9F6dCB9D9bDeAC18c191dEc6c975fB7',
        prematchComboCore: '0xF94a49F0D78eAfeda81c785131eb6419EB18b33A',
        proxyFront: '0x67f3228fD58f5A26D93a5dd0c6989b69c95618eB',
    }),
    betToken: {
        address: '0x721ef6871f1c4efe730dce047d40d1743b886946',
        symbol: 'WCHZ',
        decimals: 18,
    },
};
const chainsData = {
    [gnosis.id]: gnosisData,
    [polygon.id]: polygonData,
    [polygonAmoy.id]: polygonAmoyData,
    [chiliz.id]: chilizData,
    [spicy.id]: spicyData,
};
if (isDevEnabled) {
    chainsData[gnosis.id] = gnosisDevData;
    chainsData[polygonAmoy.id] = polygonAmoyDevData;
}
const chainsDataByEnv = {
    [Environment.GnosisXDAI]: gnosisData,
    [Environment.GnosisDevXDAI]: gnosisDevData,
    [Environment.PolygonUSDT]: polygonData,
    [Environment.PolygonAmoyAZUSD]: polygonAmoyData,
    [Environment.PolygonAmoyUSDT]: polygonAmoyDevData,
    [Environment.ChilizWCHZ]: chilizData,
    [Environment.ChilizSpicyWCHZ]: spicyData,
};const LiveConditionFragmentDoc = gql `
    fragment LiveCondition on Condition {
  id
  conditionId
  status
  outcomes {
    outcomeId
  }
  game {
    gameId
    sport {
      sportId
    }
  }
}
    `;const LiveConditionDocument = gql `
    query LiveCondition($conditionId: BigInt!) {
  condition(id: $conditionId, subgraphError: allow) {
    ...LiveCondition
  }
}
    ${LiveConditionFragmentDoc}`;const LiveConditionsDocument = gql `
    query LiveConditions($where: Condition_filter!, $orderBy: Condition_orderBy, $orderDirection: OrderDirection) {
  conditions(
    where: $where
    first: 1000
    orderBy: $orderBy
    orderDirection: $orderDirection
    subgraphError: allow
  ) {
    ...LiveCondition
    wonOutcomeIds
  }
}
    ${LiveConditionFragmentDoc}`;const BettorFragmentDoc = gql `
    fragment Bettor on Bettor {
  id
  rawToPayout
  rawInBets
  rawTotalPayout
  rawTotalProfit
  betsCount
  wonBetsCount
  lostBetsCount
}
    `;const PrematchConditionFragmentDoc = gql `
    fragment PrematchCondition on Condition {
  id
  conditionId
  status
  title
  isExpressForbidden
  margin
  outcomes {
    title
    outcomeId
    odds: currentOdds
  }
  core {
    address
    liquidityPool {
      address
    }
  }
  game {
    gameId
    sport {
      sportId
    }
  }
}
    `;const LiveBetFragmentDoc = gql `
    fragment LiveBet on LiveBet {
  id
  tokenId: betId
  amount
  status
  potentialPayout
  payout
  result
  isRedeemed
  isRedeemable
  odds
  settledOdds
  createdAt: createdBlockTimestamp
  txHash: createdTxHash
  affiliate
  core {
    address
    liquidityPool {
      address
    }
  }
  selections {
    odds
    result
    outcome {
      outcomeId
      condition {
        conditionId
        status
        gameId
      }
    }
  }
}
    `;const MainGameInfoFragmentDoc = gql `
    fragment MainGameInfo on Game {
  id
  gameId
  title
  startsAt
  status
  sport {
    sportId
    slug
    name
  }
  league {
    slug
    name
    country {
      slug
      name
    }
  }
  participants {
    image
    name
  }
}
    `;const PrematchBetFragmentDoc = gql `
    fragment PrematchBet on Bet {
  id
  tokenId: betId
  amount
  status
  potentialPayout
  payout
  result
  isRedeemed
  isRedeemable
  odds
  settledOdds
  createdAt: createdBlockTimestamp
  txHash: createdTxHash
  affiliate
  core {
    address
    liquidityPool {
      address
    }
  }
  selections {
    odds
    result
    outcome {
      outcomeId
      title
      condition {
        conditionId
        status
        title
        game {
          ...MainGameInfo
        }
      }
    }
  }
  freebet {
    freebetId
    contractAddress: freebetContractAddress
  }
}
    ${MainGameInfoFragmentDoc}`;const BettorsDocument = gql `
    query Bettors($where: Bettor_filter!) {
  bettors(where: $where, subgraphError: allow) {
    ...Bettor
  }
}
    ${BettorFragmentDoc}`;const PrematchConditionDocument = gql `
    query PrematchCondition($id: String!) {
  condition(id: $id, subgraphError: allow) {
    ...PrematchCondition
  }
}
    ${PrematchConditionFragmentDoc}`;const PrematchConditionsDocument = gql `
    query PrematchConditions($where: Condition_filter!, $orderBy: Condition_orderBy, $orderDirection: OrderDirection) {
  conditions(
    where: $where
    first: 1000
    orderBy: $orderBy
    orderDirection: $orderDirection
    subgraphError: allow
  ) {
    ...PrematchCondition
    wonOutcomeIds
  }
}
    ${PrematchConditionFragmentDoc}`;const PrematchConditionsBatchDocument = gql `
    query PrematchConditionsBatch($conditionFilter: Condition_filter) {
  conditions(where: $conditionFilter, first: 1000, subgraphError: allow) {
    status
    conditionId
    outcomes {
      id
      outcomeId
      odds: currentOdds
    }
  }
}
    `;const GameDocument = gql `
    query Game($gameId: BigInt!) {
  games(where: {gameId: $gameId}) {
    ...MainGameInfo
  }
}
    ${MainGameInfoFragmentDoc}`;const GameBetsDocument = gql `
    query GameBets($gameId: String!, $actor: String) {
  bets(where: {_games_: {gameId: $gameId}, actor: $actor}) {
    rawAmount
    rawPotentialPayout
    result
    selections {
      rawOdds
      outcome {
        outcomeId
        condition {
          conditionId
          game {
            gameId
          }
        }
      }
    }
    freebet {
      id
    }
  }
  liveBets(where: {_gamesIds: [$gameId], actor: $actor}) {
    rawAmount
    rawPotentialPayout
    result
    selections {
      outcome {
        outcomeId
        condition {
          conditionId
        }
      }
    }
  }
}
    `;const GamesDocument = gql `
    query Games($first: Int, $skip: Int, $where: Game_filter!, $orderBy: Game_orderBy, $orderDirection: OrderDirection) {
  games(
    first: $first
    skip: $skip
    where: $where
    orderBy: $orderBy
    orderDirection: $orderDirection
    subgraphError: allow
  ) {
    ...MainGameInfo
  }
}
    ${MainGameInfoFragmentDoc}`;const LiveBetsDocument = gql `
    query LiveBets($first: Int, $skip: Int, $where: Bet_filter!, $orderBy: Bet_orderBy, $orderDirection: OrderDirection) {
  liveBets(
    first: $first
    skip: $skip
    where: $where
    orderBy: $orderBy
    orderDirection: $orderDirection
    subgraphError: allow
  ) {
    ...LiveBet
  }
}
    ${LiveBetFragmentDoc}`;const NavigationDocument = gql `
    query Navigation($first: Int, $sportFilter: Sport_filter, $gameFilter: Game_filter, $withGameCount: Boolean!) {
  sports(where: $sportFilter, subgraphError: allow) {
    id
    slug
    name
    sportId
    countries(where: {hasActiveLeagues: true}) {
      id
      slug
      name
      leagues(where: {games_: $gameFilter}) {
        id
        slug
        name
        games(first: $first, where: $gameFilter) @include(if: $withGameCount) {
          id
        }
      }
    }
  }
}
    `;const PrematchBetsDocument = gql `
    query PrematchBets($first: Int, $skip: Int, $where: Bet_filter!, $orderBy: Bet_orderBy, $orderDirection: OrderDirection) {
  bets(
    first: $first
    skip: $skip
    where: $where
    orderBy: $orderBy
    orderDirection: $orderDirection
    subgraphError: allow
  ) {
    ...PrematchBet
  }
}
    ${PrematchBetFragmentDoc}`;const SportsDocument = gql `
    query Sports($first: Int, $sportFilter: Sport_filter, $countryFilter: Country_filter, $leagueFilter: League_filter, $gameFilter: Game_filter, $gameOrderBy: Game_orderBy, $gameOrderDirection: OrderDirection) {
  sports(where: $sportFilter, subgraphError: allow) {
    id
    slug
    name
    sportId
    countries(where: $countryFilter, orderBy: turnover, orderDirection: desc) {
      slug
      name
      turnover
      leagues(where: $leagueFilter, orderBy: turnover, orderDirection: desc) {
        slug
        name
        turnover
        games(
          where: $gameFilter
          first: $first
          orderBy: $gameOrderBy
          orderDirection: $gameOrderDirection
        ) {
          turnover
          ...MainGameInfo
        }
      }
    }
  }
}
    ${MainGameInfoFragmentDoc}`;const SportsNavigationDocument = gql `
    query SportsNavigation($first: Int, $sportFilter: Sport_filter, $gameFilter: Game_filter, $withGameCount: Boolean!) {
  sports(where: $sportFilter, subgraphError: allow) {
    id
    slug
    name
    sportId
    games(first: $first, where: $gameFilter) @include(if: $withGameCount) {
      id
    }
  }
}
    `;var AzuroBetContract_OrderBy;
(function (AzuroBetContract_OrderBy) {
    AzuroBetContract_OrderBy["Address"] = "address";
    AzuroBetContract_OrderBy["Core"] = "core";
    AzuroBetContract_OrderBy["Id"] = "id";
})(AzuroBetContract_OrderBy || (AzuroBetContract_OrderBy = {}));
var BetMargin_OrderBy;
(function (BetMargin_OrderBy) {
    BetMargin_OrderBy["Id"] = "id";
    BetMargin_OrderBy["Margins"] = "margins";
})(BetMargin_OrderBy || (BetMargin_OrderBy = {}));
var BetResult;
(function (BetResult) {
    BetResult["Lost"] = "Lost";
    BetResult["Won"] = "Won";
})(BetResult || (BetResult = {}));
var BetStatus$1;
(function (BetStatus) {
    BetStatus["Accepted"] = "Accepted";
    BetStatus["Canceled"] = "Canceled";
    BetStatus["Resolved"] = "Resolved";
})(BetStatus$1 || (BetStatus$1 = {}));
var BetType;
(function (BetType) {
    BetType["Express"] = "Express";
    BetType["Ordinar"] = "Ordinar";
})(BetType || (BetType = {}));
var Bet_OrderBy;
(function (Bet_OrderBy) {
    Bet_OrderBy["CanceledSubBetsCount"] = "_canceledSubBetsCount";
    Bet_OrderBy["ConditionIds"] = "_conditionIds";
    Bet_OrderBy["Conditions"] = "_conditions";
    Bet_OrderBy["Games"] = "_games";
    Bet_OrderBy["IsFreebet"] = "_isFreebet";
    Bet_OrderBy["LostSubBetsCount"] = "_lostSubBetsCount";
    Bet_OrderBy["MarginsForSettle"] = "_marginsForSettle";
    Bet_OrderBy["OddsDecimals"] = "_oddsDecimals";
    Bet_OrderBy["SubBetsCount"] = "_subBetsCount";
    Bet_OrderBy["TokenDecimals"] = "_tokenDecimals";
    Bet_OrderBy["UpdatedAt"] = "_updatedAt";
    Bet_OrderBy["WonSubBetsCount"] = "_wonSubBetsCount";
    Bet_OrderBy["Actor"] = "actor";
    Bet_OrderBy["Affiliate"] = "affiliate";
    Bet_OrderBy["Amount"] = "amount";
    Bet_OrderBy["ApproxSettledAt"] = "approxSettledAt";
    Bet_OrderBy["BetId"] = "betId";
    Bet_OrderBy["Bettor"] = "bettor";
    Bet_OrderBy["Core"] = "core";
    Bet_OrderBy["CreatedBlockNumber"] = "createdBlockNumber";
    Bet_OrderBy["CreatedBlockTimestamp"] = "createdBlockTimestamp";
    Bet_OrderBy["CreatedTxHash"] = "createdTxHash";
    Bet_OrderBy["Freebet"] = "freebet";
    Bet_OrderBy["Id"] = "id";
    Bet_OrderBy["IsRedeemable"] = "isRedeemable";
    Bet_OrderBy["IsRedeemed"] = "isRedeemed";
    Bet_OrderBy["Odds"] = "odds";
    Bet_OrderBy["Owner"] = "owner";
    Bet_OrderBy["Payout"] = "payout";
    Bet_OrderBy["PotentialPayout"] = "potentialPayout";
    Bet_OrderBy["RawAmount"] = "rawAmount";
    Bet_OrderBy["RawOdds"] = "rawOdds";
    Bet_OrderBy["RawPayout"] = "rawPayout";
    Bet_OrderBy["RawPotentialPayout"] = "rawPotentialPayout";
    Bet_OrderBy["RawSettledMargin"] = "rawSettledMargin";
    Bet_OrderBy["RawSettledOdds"] = "rawSettledOdds";
    Bet_OrderBy["RedeemedBlockNumber"] = "redeemedBlockNumber";
    Bet_OrderBy["RedeemedBlockTimestamp"] = "redeemedBlockTimestamp";
    Bet_OrderBy["RedeemedTxHash"] = "redeemedTxHash";
    Bet_OrderBy["ResolvedBlockNumber"] = "resolvedBlockNumber";
    Bet_OrderBy["ResolvedBlockTimestamp"] = "resolvedBlockTimestamp";
    Bet_OrderBy["ResolvedTxHash"] = "resolvedTxHash";
    Bet_OrderBy["Result"] = "result";
    Bet_OrderBy["Selections"] = "selections";
    Bet_OrderBy["SettledMargin"] = "settledMargin";
    Bet_OrderBy["SettledOdds"] = "settledOdds";
    Bet_OrderBy["Status"] = "status";
    Bet_OrderBy["Type"] = "type";
})(Bet_OrderBy || (Bet_OrderBy = {}));
var Bettor_OrderBy;
(function (Bettor_OrderBy) {
    Bettor_OrderBy["UpdatedAt"] = "_updatedAt";
    Bettor_OrderBy["Address"] = "address";
    Bettor_OrderBy["Affiliate"] = "affiliate";
    Bettor_OrderBy["AvgBetAmount"] = "avgBetAmount";
    Bettor_OrderBy["BetsCount"] = "betsCount";
    Bettor_OrderBy["BiggestBetAmount"] = "biggestBetAmount";
    Bettor_OrderBy["BiggestPayout"] = "biggestPayout";
    Bettor_OrderBy["CanceledBetsCount"] = "canceledBetsCount";
    Bettor_OrderBy["ExpressBetsCount"] = "expressBetsCount";
    Bettor_OrderBy["FirstBetTimestamp"] = "firstBetTimestamp";
    Bettor_OrderBy["Id"] = "id";
    Bettor_OrderBy["InBets"] = "inBets";
    Bettor_OrderBy["LastBetTimestamp"] = "lastBetTimestamp";
    Bettor_OrderBy["LiveBetsCount"] = "liveBetsCount";
    Bettor_OrderBy["LostBetsCount"] = "lostBetsCount";
    Bettor_OrderBy["Pnl"] = "pnl";
    Bettor_OrderBy["PrematchBetsCount"] = "prematchBetsCount";
    Bettor_OrderBy["RawAvgBetAmount"] = "rawAvgBetAmount";
    Bettor_OrderBy["RawBiggestBetAmount"] = "rawBiggestBetAmount";
    Bettor_OrderBy["RawBiggestPayout"] = "rawBiggestPayout";
    Bettor_OrderBy["RawInBets"] = "rawInBets";
    Bettor_OrderBy["RawToPayout"] = "rawToPayout";
    Bettor_OrderBy["RawTotalPayout"] = "rawTotalPayout";
    Bettor_OrderBy["RawTotalProfit"] = "rawTotalProfit";
    Bettor_OrderBy["RawTurnover"] = "rawTurnover";
    Bettor_OrderBy["RedeemedBetsCount"] = "redeemedBetsCount";
    Bettor_OrderBy["SettledBetsCount"] = "settledBetsCount";
    Bettor_OrderBy["ToPayout"] = "toPayout";
    Bettor_OrderBy["TotalPayout"] = "totalPayout";
    Bettor_OrderBy["TotalProfit"] = "totalProfit";
    Bettor_OrderBy["Turnover"] = "turnover";
    Bettor_OrderBy["WonBetsCount"] = "wonBetsCount";
})(Bettor_OrderBy || (Bettor_OrderBy = {}));
var ConditionStatus$1;
(function (ConditionStatus) {
    ConditionStatus["Canceled"] = "Canceled";
    ConditionStatus["Created"] = "Created";
    ConditionStatus["Paused"] = "Paused";
    ConditionStatus["Resolved"] = "Resolved";
})(ConditionStatus$1 || (ConditionStatus$1 = {}));
var Condition_OrderBy$1;
(function (Condition_OrderBy) {
    Condition_OrderBy["UpdatedAt"] = "_updatedAt";
    Condition_OrderBy["WinningOutcomesCount"] = "_winningOutcomesCount";
    Condition_OrderBy["ConditionId"] = "conditionId";
    Condition_OrderBy["Core"] = "core";
    Condition_OrderBy["CoreAddress"] = "coreAddress";
    Condition_OrderBy["CreatedBlockNumber"] = "createdBlockNumber";
    Condition_OrderBy["CreatedBlockTimestamp"] = "createdBlockTimestamp";
    Condition_OrderBy["CreatedTxHash"] = "createdTxHash";
    Condition_OrderBy["Game"] = "game";
    Condition_OrderBy["Id"] = "id";
    Condition_OrderBy["InternalStartsAt"] = "internalStartsAt";
    Condition_OrderBy["IsExpressForbidden"] = "isExpressForbidden";
    Condition_OrderBy["Margin"] = "margin";
    Condition_OrderBy["Outcomes"] = "outcomes";
    Condition_OrderBy["OutcomesIds"] = "outcomesIds";
    Condition_OrderBy["Provider"] = "provider";
    Condition_OrderBy["Reinforcement"] = "reinforcement";
    Condition_OrderBy["ResolvedBlockNumber"] = "resolvedBlockNumber";
    Condition_OrderBy["ResolvedBlockTimestamp"] = "resolvedBlockTimestamp";
    Condition_OrderBy["ResolvedTxHash"] = "resolvedTxHash";
    Condition_OrderBy["Status"] = "status";
    Condition_OrderBy["Title"] = "title";
    Condition_OrderBy["Turnover"] = "turnover";
    Condition_OrderBy["WonOutcomeIds"] = "wonOutcomeIds";
    Condition_OrderBy["WonOutcomes"] = "wonOutcomes";
})(Condition_OrderBy$1 || (Condition_OrderBy$1 = {}));
var CoreContract_OrderBy;
(function (CoreContract_OrderBy) {
    CoreContract_OrderBy["Address"] = "address";
    CoreContract_OrderBy["Id"] = "id";
    CoreContract_OrderBy["LiquidityPool"] = "liquidityPool";
    CoreContract_OrderBy["Type"] = "type";
})(CoreContract_OrderBy || (CoreContract_OrderBy = {}));
var Country_OrderBy$1;
(function (Country_OrderBy) {
    Country_OrderBy["ActiveLeaguesEntityIds"] = "activeLeaguesEntityIds";
    Country_OrderBy["HasActiveLeagues"] = "hasActiveLeagues";
    Country_OrderBy["Id"] = "id";
    Country_OrderBy["Leagues"] = "leagues";
    Country_OrderBy["Name"] = "name";
    Country_OrderBy["Slug"] = "slug";
    Country_OrderBy["Sport"] = "sport";
    Country_OrderBy["Turnover"] = "turnover";
})(Country_OrderBy$1 || (Country_OrderBy$1 = {}));
var EventName$1;
(function (EventName) {
    EventName["AzuroBetTransfer"] = "AzuroBetTransfer";
    EventName["BetSettled"] = "BetSettled";
    EventName["BettorWin"] = "BettorWin";
    EventName["ConditionCreated"] = "ConditionCreated";
    EventName["ConditionResolved"] = "ConditionResolved";
    EventName["ConditionShifted"] = "ConditionShifted";
    EventName["ConditionStopped"] = "ConditionStopped";
    EventName["FreeBetBettorWin"] = "FreeBetBettorWin";
    EventName["FreeBetMinted"] = "FreeBetMinted";
    EventName["FreeBetRedeemed"] = "FreeBetRedeemed";
    EventName["FreeBetReissued"] = "FreeBetReissued";
    EventName["FreeBetTransfer"] = "FreeBetTransfer";
    EventName["GameShifted"] = "GameShifted";
    EventName["LiquidityAdded"] = "LiquidityAdded";
    EventName["LiquidityRemoved"] = "LiquidityRemoved";
    EventName["LiquidityTransfer"] = "LiquidityTransfer";
    EventName["LiveBetSettled"] = "LiveBetSettled";
    EventName["MarginChanged"] = "MarginChanged";
    EventName["NewBet"] = "NewBet";
    EventName["NewGame"] = "NewGame";
    EventName["NewLiveBet"] = "NewLiveBet";
    EventName["ReinforcementChanged"] = "ReinforcementChanged";
})(EventName$1 || (EventName$1 = {}));
var Event_OrderBy$1;
(function (Event_OrderBy) {
    Event_OrderBy["Affiliate"] = "affiliate";
    Event_OrderBy["BetId"] = "betId";
    Event_OrderBy["BlockNumber"] = "blockNumber";
    Event_OrderBy["BlockTimestamp"] = "blockTimestamp";
    Event_OrderBy["ConditionId"] = "conditionId";
    Event_OrderBy["ContractAddress"] = "contractAddress";
    Event_OrderBy["DepositId"] = "depositId";
    Event_OrderBy["FreebetId"] = "freebetId";
    Event_OrderBy["GameId"] = "gameId";
    Event_OrderBy["GasPrice"] = "gasPrice";
    Event_OrderBy["GasUsed"] = "gasUsed";
    Event_OrderBy["Id"] = "id";
    Event_OrderBy["LogIndex"] = "logIndex";
    Event_OrderBy["Name"] = "name";
    Event_OrderBy["SortOrder"] = "sortOrder";
    Event_OrderBy["TransactionIndex"] = "transactionIndex";
    Event_OrderBy["TxHash"] = "txHash";
})(Event_OrderBy$1 || (Event_OrderBy$1 = {}));
var ExpressPrematchRelation_OrderBy;
(function (ExpressPrematchRelation_OrderBy) {
    ExpressPrematchRelation_OrderBy["Id"] = "id";
    ExpressPrematchRelation_OrderBy["PrematchAddress"] = "prematchAddress";
})(ExpressPrematchRelation_OrderBy || (ExpressPrematchRelation_OrderBy = {}));
var FreebetContract_OrderBy;
(function (FreebetContract_OrderBy) {
    FreebetContract_OrderBy["Address"] = "address";
    FreebetContract_OrderBy["Affiliate"] = "affiliate";
    FreebetContract_OrderBy["Id"] = "id";
    FreebetContract_OrderBy["LiquidityPool"] = "liquidityPool";
    FreebetContract_OrderBy["Manager"] = "manager";
    FreebetContract_OrderBy["Name"] = "name";
})(FreebetContract_OrderBy || (FreebetContract_OrderBy = {}));
var FreebetStatus;
(function (FreebetStatus) {
    FreebetStatus["Created"] = "Created";
    FreebetStatus["Redeemed"] = "Redeemed";
    FreebetStatus["Reissued"] = "Reissued";
    FreebetStatus["Withdrawn"] = "Withdrawn";
})(FreebetStatus || (FreebetStatus = {}));
var Freebet_OrderBy;
(function (Freebet_OrderBy) {
    Freebet_OrderBy["UpdatedAt"] = "_updatedAt";
    Freebet_OrderBy["Amount"] = "amount";
    Freebet_OrderBy["AzuroBetId"] = "azuroBetId";
    Freebet_OrderBy["Burned"] = "burned";
    Freebet_OrderBy["Core"] = "core";
    Freebet_OrderBy["CreatedBlockNumber"] = "createdBlockNumber";
    Freebet_OrderBy["CreatedBlockTimestamp"] = "createdBlockTimestamp";
    Freebet_OrderBy["CreatedTxHash"] = "createdTxHash";
    Freebet_OrderBy["DurationTime"] = "durationTime";
    Freebet_OrderBy["ExpiresAt"] = "expiresAt";
    Freebet_OrderBy["Freebet"] = "freebet";
    Freebet_OrderBy["FreebetContractAddress"] = "freebetContractAddress";
    Freebet_OrderBy["FreebetContractAffiliate"] = "freebetContractAffiliate";
    Freebet_OrderBy["FreebetContractName"] = "freebetContractName";
    Freebet_OrderBy["FreebetId"] = "freebetId";
    Freebet_OrderBy["Id"] = "id";
    Freebet_OrderBy["IsResolved"] = "isResolved";
    Freebet_OrderBy["MinOdds"] = "minOdds";
    Freebet_OrderBy["Owner"] = "owner";
    Freebet_OrderBy["RawAmount"] = "rawAmount";
    Freebet_OrderBy["RawMinOdds"] = "rawMinOdds";
    Freebet_OrderBy["Status"] = "status";
    Freebet_OrderBy["TokenDecimals"] = "tokenDecimals";
})(Freebet_OrderBy || (Freebet_OrderBy = {}));
var GameStatus$2;
(function (GameStatus) {
    GameStatus["Canceled"] = "Canceled";
    GameStatus["Created"] = "Created";
    GameStatus["Paused"] = "Paused";
    GameStatus["Resolved"] = "Resolved";
})(GameStatus$2 || (GameStatus$2 = {}));
var Game_OrderBy$1;
(function (Game_OrderBy) {
    Game_OrderBy["ActiveConditionsEntityIds"] = "_activeConditionsEntityIds";
    Game_OrderBy["CanceledConditionsEntityIds"] = "_canceledConditionsEntityIds";
    Game_OrderBy["PausedConditionsEntityIds"] = "_pausedConditionsEntityIds";
    Game_OrderBy["ResolvedConditionsEntityIds"] = "_resolvedConditionsEntityIds";
    Game_OrderBy["UpdatedAt"] = "_updatedAt";
    Game_OrderBy["Conditions"] = "conditions";
    Game_OrderBy["CreatedBlockNumber"] = "createdBlockNumber";
    Game_OrderBy["CreatedBlockTimestamp"] = "createdBlockTimestamp";
    Game_OrderBy["CreatedTxHash"] = "createdTxHash";
    Game_OrderBy["GameId"] = "gameId";
    Game_OrderBy["HasActiveConditions"] = "hasActiveConditions";
    Game_OrderBy["Id"] = "id";
    Game_OrderBy["League"] = "league";
    Game_OrderBy["LiquidityPool"] = "liquidityPool";
    Game_OrderBy["Participants"] = "participants";
    Game_OrderBy["Provider"] = "provider";
    Game_OrderBy["ResolvedBlockNumber"] = "resolvedBlockNumber";
    Game_OrderBy["ResolvedBlockTimestamp"] = "resolvedBlockTimestamp";
    Game_OrderBy["ResolvedTxHash"] = "resolvedTxHash";
    Game_OrderBy["ShiftedBlockNumber"] = "shiftedBlockNumber";
    Game_OrderBy["ShiftedBlockTimestamp"] = "shiftedBlockTimestamp";
    Game_OrderBy["ShiftedTxHash"] = "shiftedTxHash";
    Game_OrderBy["Slug"] = "slug";
    Game_OrderBy["Sport"] = "sport";
    Game_OrderBy["StartsAt"] = "startsAt";
    Game_OrderBy["Status"] = "status";
    Game_OrderBy["Title"] = "title";
    Game_OrderBy["Turnover"] = "turnover";
})(Game_OrderBy$1 || (Game_OrderBy$1 = {}));
var League_OrderBy$1;
(function (League_OrderBy) {
    League_OrderBy["ActiveGamesEntityIds"] = "activeGamesEntityIds";
    League_OrderBy["Country"] = "country";
    League_OrderBy["Games"] = "games";
    League_OrderBy["HasActiveGames"] = "hasActiveGames";
    League_OrderBy["Id"] = "id";
    League_OrderBy["Name"] = "name";
    League_OrderBy["Slug"] = "slug";
    League_OrderBy["Turnover"] = "turnover";
})(League_OrderBy$1 || (League_OrderBy$1 = {}));
var LiquidityPoolContractType;
(function (LiquidityPoolContractType) {
    LiquidityPoolContractType["V1"] = "V1";
    LiquidityPoolContractType["V2"] = "V2";
})(LiquidityPoolContractType || (LiquidityPoolContractType = {}));
var LiquidityPoolContract_OrderBy;
(function (LiquidityPoolContract_OrderBy) {
    LiquidityPoolContract_OrderBy["Address"] = "address";
    LiquidityPoolContract_OrderBy["Apr"] = "apr";
    LiquidityPoolContract_OrderBy["Asset"] = "asset";
    LiquidityPoolContract_OrderBy["BetsAmount"] = "betsAmount";
    LiquidityPoolContract_OrderBy["BetsCount"] = "betsCount";
    LiquidityPoolContract_OrderBy["ChainId"] = "chainId";
    LiquidityPoolContract_OrderBy["ChainName"] = "chainName";
    LiquidityPoolContract_OrderBy["CoreAddresses"] = "coreAddresses";
    LiquidityPoolContract_OrderBy["Cores"] = "cores";
    LiquidityPoolContract_OrderBy["DaysSinceDeployment"] = "daysSinceDeployment";
    LiquidityPoolContract_OrderBy["DepositedAmount"] = "depositedAmount";
    LiquidityPoolContract_OrderBy["DepositedWithStakingAmount"] = "depositedWithStakingAmount";
    LiquidityPoolContract_OrderBy["FirstCalculatedBlockNumber"] = "firstCalculatedBlockNumber";
    LiquidityPoolContract_OrderBy["FirstCalculatedBlockTimestamp"] = "firstCalculatedBlockTimestamp";
    LiquidityPoolContract_OrderBy["Id"] = "id";
    LiquidityPoolContract_OrderBy["LastCalculatedBlockNumber"] = "lastCalculatedBlockNumber";
    LiquidityPoolContract_OrderBy["LastCalculatedBlockTimestamp"] = "lastCalculatedBlockTimestamp";
    LiquidityPoolContract_OrderBy["LiquidityManager"] = "liquidityManager";
    LiquidityPoolContract_OrderBy["Nfts"] = "nfts";
    LiquidityPoolContract_OrderBy["RawApr"] = "rawApr";
    LiquidityPoolContract_OrderBy["RawTvl"] = "rawTvl";
    LiquidityPoolContract_OrderBy["Token"] = "token";
    LiquidityPoolContract_OrderBy["TokenDecimals"] = "tokenDecimals";
    LiquidityPoolContract_OrderBy["Tvl"] = "tvl";
    LiquidityPoolContract_OrderBy["Type"] = "type";
    LiquidityPoolContract_OrderBy["WithdrawTimeout"] = "withdrawTimeout";
    LiquidityPoolContract_OrderBy["WithdrawnAmount"] = "withdrawnAmount";
    LiquidityPoolContract_OrderBy["WithdrawnWithStakingAmount"] = "withdrawnWithStakingAmount";
    LiquidityPoolContract_OrderBy["WonBetsAmount"] = "wonBetsAmount";
    LiquidityPoolContract_OrderBy["WonBetsCount"] = "wonBetsCount";
})(LiquidityPoolContract_OrderBy || (LiquidityPoolContract_OrderBy = {}));
var LiquidityPoolNft_OrderBy;
(function (LiquidityPoolNft_OrderBy) {
    LiquidityPoolNft_OrderBy["CreateBlockNumber"] = "createBlockNumber";
    LiquidityPoolNft_OrderBy["CreateBlockTimestamp"] = "createBlockTimestamp";
    LiquidityPoolNft_OrderBy["DepositedAmount"] = "depositedAmount";
    LiquidityPoolNft_OrderBy["HistoricalOwners"] = "historicalOwners";
    LiquidityPoolNft_OrderBy["Id"] = "id";
    LiquidityPoolNft_OrderBy["IsFullyWithdrawn"] = "isFullyWithdrawn";
    LiquidityPoolNft_OrderBy["LiquidityPool"] = "liquidityPool";
    LiquidityPoolNft_OrderBy["NftId"] = "nftId";
    LiquidityPoolNft_OrderBy["Owner"] = "owner";
    LiquidityPoolNft_OrderBy["RawDepositedAmount"] = "rawDepositedAmount";
    LiquidityPoolNft_OrderBy["RawWithdrawnAmount"] = "rawWithdrawnAmount";
    LiquidityPoolNft_OrderBy["Transactions"] = "transactions";
    LiquidityPoolNft_OrderBy["WithdrawTimeout"] = "withdrawTimeout";
    LiquidityPoolNft_OrderBy["WithdrawnAmount"] = "withdrawnAmount";
})(LiquidityPoolNft_OrderBy || (LiquidityPoolNft_OrderBy = {}));
var LiquidityPoolTransactionType;
(function (LiquidityPoolTransactionType) {
    LiquidityPoolTransactionType["Deposit"] = "Deposit";
    LiquidityPoolTransactionType["Withdrawal"] = "Withdrawal";
})(LiquidityPoolTransactionType || (LiquidityPoolTransactionType = {}));
var LiquidityPoolTransaction_OrderBy;
(function (LiquidityPoolTransaction_OrderBy) {
    LiquidityPoolTransaction_OrderBy["Account"] = "account";
    LiquidityPoolTransaction_OrderBy["Amount"] = "amount";
    LiquidityPoolTransaction_OrderBy["BlockNumber"] = "blockNumber";
    LiquidityPoolTransaction_OrderBy["BlockTimestamp"] = "blockTimestamp";
    LiquidityPoolTransaction_OrderBy["Id"] = "id";
    LiquidityPoolTransaction_OrderBy["LiquidityPool"] = "liquidityPool";
    LiquidityPoolTransaction_OrderBy["Nft"] = "nft";
    LiquidityPoolTransaction_OrderBy["RawAmount"] = "rawAmount";
    LiquidityPoolTransaction_OrderBy["TxHash"] = "txHash";
    LiquidityPoolTransaction_OrderBy["Type"] = "type";
})(LiquidityPoolTransaction_OrderBy || (LiquidityPoolTransaction_OrderBy = {}));
var LiveBet_OrderBy;
(function (LiveBet_OrderBy) {
    LiveBet_OrderBy["CanceledSubBetsCount"] = "_canceledSubBetsCount";
    LiveBet_OrderBy["ConditionIds"] = "_conditionIds";
    LiveBet_OrderBy["Conditions"] = "_conditions";
    LiveBet_OrderBy["GamesIds"] = "_gamesIds";
    LiveBet_OrderBy["IsFreebet"] = "_isFreebet";
    LiveBet_OrderBy["LostSubBetsCount"] = "_lostSubBetsCount";
    LiveBet_OrderBy["MarginsForSettle"] = "_marginsForSettle";
    LiveBet_OrderBy["OddsDecimals"] = "_oddsDecimals";
    LiveBet_OrderBy["SubBetsCount"] = "_subBetsCount";
    LiveBet_OrderBy["TokenDecimals"] = "_tokenDecimals";
    LiveBet_OrderBy["UpdatedAt"] = "_updatedAt";
    LiveBet_OrderBy["WonSubBetsCount"] = "_wonSubBetsCount";
    LiveBet_OrderBy["Actor"] = "actor";
    LiveBet_OrderBy["Affiliate"] = "affiliate";
    LiveBet_OrderBy["Amount"] = "amount";
    LiveBet_OrderBy["BetId"] = "betId";
    LiveBet_OrderBy["Bettor"] = "bettor";
    LiveBet_OrderBy["Core"] = "core";
    LiveBet_OrderBy["CreatedBlockNumber"] = "createdBlockNumber";
    LiveBet_OrderBy["CreatedBlockTimestamp"] = "createdBlockTimestamp";
    LiveBet_OrderBy["CreatedTxHash"] = "createdTxHash";
    LiveBet_OrderBy["Freebet"] = "freebet";
    LiveBet_OrderBy["Id"] = "id";
    LiveBet_OrderBy["IsRedeemable"] = "isRedeemable";
    LiveBet_OrderBy["IsRedeemed"] = "isRedeemed";
    LiveBet_OrderBy["Nonce"] = "nonce";
    LiveBet_OrderBy["Odds"] = "odds";
    LiveBet_OrderBy["Owner"] = "owner";
    LiveBet_OrderBy["Payout"] = "payout";
    LiveBet_OrderBy["PayoutLimit"] = "payoutLimit";
    LiveBet_OrderBy["PotentialPayout"] = "potentialPayout";
    LiveBet_OrderBy["RawAmount"] = "rawAmount";
    LiveBet_OrderBy["RawOdds"] = "rawOdds";
    LiveBet_OrderBy["RawPayout"] = "rawPayout";
    LiveBet_OrderBy["RawPayoutLimit"] = "rawPayoutLimit";
    LiveBet_OrderBy["RawPotentialPayout"] = "rawPotentialPayout";
    LiveBet_OrderBy["RawSettledMargin"] = "rawSettledMargin";
    LiveBet_OrderBy["RawSettledOdds"] = "rawSettledOdds";
    LiveBet_OrderBy["RedeemedBlockNumber"] = "redeemedBlockNumber";
    LiveBet_OrderBy["RedeemedBlockTimestamp"] = "redeemedBlockTimestamp";
    LiveBet_OrderBy["RedeemedTxHash"] = "redeemedTxHash";
    LiveBet_OrderBy["ResolvedBlockNumber"] = "resolvedBlockNumber";
    LiveBet_OrderBy["ResolvedBlockTimestamp"] = "resolvedBlockTimestamp";
    LiveBet_OrderBy["ResolvedTxHash"] = "resolvedTxHash";
    LiveBet_OrderBy["Result"] = "result";
    LiveBet_OrderBy["Selections"] = "selections";
    LiveBet_OrderBy["SettledMargin"] = "settledMargin";
    LiveBet_OrderBy["SettledOdds"] = "settledOdds";
    LiveBet_OrderBy["Status"] = "status";
})(LiveBet_OrderBy || (LiveBet_OrderBy = {}));
var LiveCondition_OrderBy;
(function (LiveCondition_OrderBy) {
    LiveCondition_OrderBy["UpdatedAt"] = "_updatedAt";
    LiveCondition_OrderBy["WinningOutcomesCount"] = "_winningOutcomesCount";
    LiveCondition_OrderBy["ConditionId"] = "conditionId";
    LiveCondition_OrderBy["Core"] = "core";
    LiveCondition_OrderBy["CoreAddress"] = "coreAddress";
    LiveCondition_OrderBy["CreatedBlockNumber"] = "createdBlockNumber";
    LiveCondition_OrderBy["CreatedBlockTimestamp"] = "createdBlockTimestamp";
    LiveCondition_OrderBy["CreatedTxHash"] = "createdTxHash";
    LiveCondition_OrderBy["GameId"] = "gameId";
    LiveCondition_OrderBy["Id"] = "id";
    LiveCondition_OrderBy["Outcomes"] = "outcomes";
    LiveCondition_OrderBy["OutcomesIds"] = "outcomesIds";
    LiveCondition_OrderBy["ResolvedBlockNumber"] = "resolvedBlockNumber";
    LiveCondition_OrderBy["ResolvedBlockTimestamp"] = "resolvedBlockTimestamp";
    LiveCondition_OrderBy["ResolvedTxHash"] = "resolvedTxHash";
    LiveCondition_OrderBy["Status"] = "status";
    LiveCondition_OrderBy["Title"] = "title";
    LiveCondition_OrderBy["Turnover"] = "turnover";
    LiveCondition_OrderBy["WonOutcomeIds"] = "wonOutcomeIds";
    LiveCondition_OrderBy["WonOutcomes"] = "wonOutcomes";
})(LiveCondition_OrderBy || (LiveCondition_OrderBy = {}));
var LiveOutcome_OrderBy;
(function (LiveOutcome_OrderBy) {
    LiveOutcome_OrderBy["BetsEntityIds"] = "_betsEntityIds";
    LiveOutcome_OrderBy["UpdatedAt"] = "_updatedAt";
    LiveOutcome_OrderBy["Condition"] = "condition";
    LiveOutcome_OrderBy["Core"] = "core";
    LiveOutcome_OrderBy["Id"] = "id";
    LiveOutcome_OrderBy["OutcomeId"] = "outcomeId";
    LiveOutcome_OrderBy["Result"] = "result";
    LiveOutcome_OrderBy["Selections"] = "selections";
    LiveOutcome_OrderBy["SortOrder"] = "sortOrder";
    LiveOutcome_OrderBy["Title"] = "title";
})(LiveOutcome_OrderBy || (LiveOutcome_OrderBy = {}));
var LiveSelection_OrderBy;
(function (LiveSelection_OrderBy) {
    LiveSelection_OrderBy["OddsDecimals"] = "_oddsDecimals";
    LiveSelection_OrderBy["OutcomeId"] = "_outcomeId";
    LiveSelection_OrderBy["Bet"] = "bet";
    LiveSelection_OrderBy["Id"] = "id";
    LiveSelection_OrderBy["Margin"] = "margin";
    LiveSelection_OrderBy["Odds"] = "odds";
    LiveSelection_OrderBy["Outcome"] = "outcome";
    LiveSelection_OrderBy["RawMargin"] = "rawMargin";
    LiveSelection_OrderBy["RawOdds"] = "rawOdds";
    LiveSelection_OrderBy["Result"] = "result";
})(LiveSelection_OrderBy || (LiveSelection_OrderBy = {}));
/** Defines the order direction, either ascending or descending */
var OrderDirection$1;
(function (OrderDirection) {
    OrderDirection["Asc"] = "asc";
    OrderDirection["Desc"] = "desc";
})(OrderDirection$1 || (OrderDirection$1 = {}));
var OutcomeResult;
(function (OutcomeResult) {
    OutcomeResult["Lost"] = "Lost";
    OutcomeResult["Won"] = "Won";
})(OutcomeResult || (OutcomeResult = {}));
var Outcome_OrderBy$1;
(function (Outcome_OrderBy) {
    Outcome_OrderBy["BetsEntityIds"] = "_betsEntityIds";
    Outcome_OrderBy["UpdatedAt"] = "_updatedAt";
    Outcome_OrderBy["Condition"] = "condition";
    Outcome_OrderBy["Core"] = "core";
    Outcome_OrderBy["CurrentOdds"] = "currentOdds";
    Outcome_OrderBy["Fund"] = "fund";
    Outcome_OrderBy["Id"] = "id";
    Outcome_OrderBy["OutcomeId"] = "outcomeId";
    Outcome_OrderBy["RawCurrentOdds"] = "rawCurrentOdds";
    Outcome_OrderBy["Result"] = "result";
    Outcome_OrderBy["Selections"] = "selections";
    Outcome_OrderBy["SortOrder"] = "sortOrder";
    Outcome_OrderBy["Title"] = "title";
})(Outcome_OrderBy$1 || (Outcome_OrderBy$1 = {}));
var Participant_OrderBy$1;
(function (Participant_OrderBy) {
    Participant_OrderBy["Game"] = "game";
    Participant_OrderBy["Id"] = "id";
    Participant_OrderBy["Image"] = "image";
    Participant_OrderBy["Name"] = "name";
    Participant_OrderBy["SortOrder"] = "sortOrder";
})(Participant_OrderBy$1 || (Participant_OrderBy$1 = {}));
var SelectionResult$1;
(function (SelectionResult) {
    SelectionResult["Lost"] = "Lost";
    SelectionResult["Won"] = "Won";
})(SelectionResult$1 || (SelectionResult$1 = {}));
var Selection_OrderBy;
(function (Selection_OrderBy) {
    Selection_OrderBy["OddsDecimals"] = "_oddsDecimals";
    Selection_OrderBy["OutcomeId"] = "_outcomeId";
    Selection_OrderBy["Bet"] = "bet";
    Selection_OrderBy["Id"] = "id";
    Selection_OrderBy["Margin"] = "margin";
    Selection_OrderBy["Odds"] = "odds";
    Selection_OrderBy["Outcome"] = "outcome";
    Selection_OrderBy["RawMargin"] = "rawMargin";
    Selection_OrderBy["RawOdds"] = "rawOdds";
    Selection_OrderBy["Result"] = "result";
})(Selection_OrderBy || (Selection_OrderBy = {}));
var SportHub_OrderBy$1;
(function (SportHub_OrderBy) {
    SportHub_OrderBy["Id"] = "id";
    SportHub_OrderBy["Name"] = "name";
    SportHub_OrderBy["Slug"] = "slug";
    SportHub_OrderBy["Sports"] = "sports";
})(SportHub_OrderBy$1 || (SportHub_OrderBy$1 = {}));
var Sport_OrderBy$1;
(function (Sport_OrderBy) {
    Sport_OrderBy["Countries"] = "countries";
    Sport_OrderBy["Games"] = "games";
    Sport_OrderBy["Id"] = "id";
    Sport_OrderBy["Name"] = "name";
    Sport_OrderBy["Slug"] = "slug";
    Sport_OrderBy["SportId"] = "sportId";
    Sport_OrderBy["Sporthub"] = "sporthub";
})(Sport_OrderBy$1 || (Sport_OrderBy$1 = {}));
var _SubgraphErrorPolicy_$1;
(function (_SubgraphErrorPolicy_) {
    /** Data will be returned even if the subgraph has indexing errors */
    _SubgraphErrorPolicy_["Allow"] = "allow";
    /** If the subgraph has indexing errors, data will be omitted. The default. */
    _SubgraphErrorPolicy_["Deny"] = "deny";
})(_SubgraphErrorPolicy_$1 || (_SubgraphErrorPolicy_$1 = {}));var ConditionStatus;
(function (ConditionStatus) {
    ConditionStatus["Canceled"] = "Canceled";
    ConditionStatus["Created"] = "Created";
    ConditionStatus["Paused"] = "Paused";
    ConditionStatus["Resolved"] = "Resolved";
})(ConditionStatus || (ConditionStatus = {}));
var Condition_OrderBy;
(function (Condition_OrderBy) {
    Condition_OrderBy["UpdatedAt"] = "_updatedAt";
    Condition_OrderBy["WinningOutcomesCount"] = "_winningOutcomesCount";
    Condition_OrderBy["ConditionId"] = "conditionId";
    Condition_OrderBy["CreatedBlockNumber"] = "createdBlockNumber";
    Condition_OrderBy["CreatedBlockTimestamp"] = "createdBlockTimestamp";
    Condition_OrderBy["CreatedTxHash"] = "createdTxHash";
    Condition_OrderBy["Game"] = "game";
    Condition_OrderBy["Id"] = "id";
    Condition_OrderBy["InternalStartsAt"] = "internalStartsAt";
    Condition_OrderBy["Outcomes"] = "outcomes";
    Condition_OrderBy["OutcomesIds"] = "outcomesIds";
    Condition_OrderBy["Provider"] = "provider";
    Condition_OrderBy["ResolvedBlockNumber"] = "resolvedBlockNumber";
    Condition_OrderBy["ResolvedBlockTimestamp"] = "resolvedBlockTimestamp";
    Condition_OrderBy["ResolvedTxHash"] = "resolvedTxHash";
    Condition_OrderBy["Status"] = "status";
    Condition_OrderBy["Title"] = "title";
    Condition_OrderBy["Turnover"] = "turnover";
    Condition_OrderBy["WonOutcomeIds"] = "wonOutcomeIds";
    Condition_OrderBy["WonOutcomes"] = "wonOutcomes";
})(Condition_OrderBy || (Condition_OrderBy = {}));
var Country_OrderBy;
(function (Country_OrderBy) {
    Country_OrderBy["ActiveLeaguesEntityIds"] = "activeLeaguesEntityIds";
    Country_OrderBy["HasActiveLeagues"] = "hasActiveLeagues";
    Country_OrderBy["Id"] = "id";
    Country_OrderBy["Leagues"] = "leagues";
    Country_OrderBy["Name"] = "name";
    Country_OrderBy["Slug"] = "slug";
    Country_OrderBy["Sport"] = "sport";
    Country_OrderBy["Turnover"] = "turnover";
})(Country_OrderBy || (Country_OrderBy = {}));
var EventName;
(function (EventName) {
    EventName["ConditionCreated"] = "ConditionCreated";
    EventName["ConditionResolved"] = "ConditionResolved";
    EventName["ConditionStopped"] = "ConditionStopped";
    EventName["GameCanceled"] = "GameCanceled";
    EventName["GameUpdated"] = "GameUpdated";
    EventName["NewGame"] = "NewGame";
})(EventName || (EventName = {}));
var Event_OrderBy;
(function (Event_OrderBy) {
    Event_OrderBy["BlockNumber"] = "blockNumber";
    Event_OrderBy["BlockTimestamp"] = "blockTimestamp";
    Event_OrderBy["ConditionId"] = "conditionId";
    Event_OrderBy["ContractAddress"] = "contractAddress";
    Event_OrderBy["GameId"] = "gameId";
    Event_OrderBy["GasPrice"] = "gasPrice";
    Event_OrderBy["GasUsed"] = "gasUsed";
    Event_OrderBy["Id"] = "id";
    Event_OrderBy["LogIndex"] = "logIndex";
    Event_OrderBy["Name"] = "name";
    Event_OrderBy["SortOrder"] = "sortOrder";
    Event_OrderBy["TransactionIndex"] = "transactionIndex";
    Event_OrderBy["TxHash"] = "txHash";
})(Event_OrderBy || (Event_OrderBy = {}));
var GameStatus$1;
(function (GameStatus) {
    GameStatus["Canceled"] = "Canceled";
    GameStatus["Created"] = "Created";
    GameStatus["Finished"] = "Finished";
    GameStatus["Paused"] = "Paused";
    GameStatus["Resolved"] = "Resolved";
})(GameStatus$1 || (GameStatus$1 = {}));
var Game_OrderBy;
(function (Game_OrderBy) {
    Game_OrderBy["ActiveConditionsEntityIds"] = "_activeConditionsEntityIds";
    Game_OrderBy["CanceledConditionsEntityIds"] = "_canceledConditionsEntityIds";
    Game_OrderBy["ResolvedConditionsEntityIds"] = "_resolvedConditionsEntityIds";
    Game_OrderBy["UpdatedAt"] = "_updatedAt";
    Game_OrderBy["Conditions"] = "conditions";
    Game_OrderBy["CreatedBlockNumber"] = "createdBlockNumber";
    Game_OrderBy["CreatedBlockTimestamp"] = "createdBlockTimestamp";
    Game_OrderBy["CreatedTxHash"] = "createdTxHash";
    Game_OrderBy["FinishedBlockNumber"] = "finishedBlockNumber";
    Game_OrderBy["FinishedBlockTimestamp"] = "finishedBlockTimestamp";
    Game_OrderBy["FinishedTxHash"] = "finishedTxHash";
    Game_OrderBy["GameId"] = "gameId";
    Game_OrderBy["HasActiveConditions"] = "hasActiveConditions";
    Game_OrderBy["Id"] = "id";
    Game_OrderBy["League"] = "league";
    Game_OrderBy["Participants"] = "participants";
    Game_OrderBy["Provider"] = "provider";
    Game_OrderBy["ResolvedBlockNumber"] = "resolvedBlockNumber";
    Game_OrderBy["ResolvedBlockTimestamp"] = "resolvedBlockTimestamp";
    Game_OrderBy["ResolvedTxHash"] = "resolvedTxHash";
    Game_OrderBy["ShiftedBlockNumber"] = "shiftedBlockNumber";
    Game_OrderBy["ShiftedBlockTimestamp"] = "shiftedBlockTimestamp";
    Game_OrderBy["ShiftedTxHash"] = "shiftedTxHash";
    Game_OrderBy["Slug"] = "slug";
    Game_OrderBy["Sport"] = "sport";
    Game_OrderBy["StartsAt"] = "startsAt";
    Game_OrderBy["Status"] = "status";
    Game_OrderBy["Title"] = "title";
    Game_OrderBy["Turnover"] = "turnover";
})(Game_OrderBy || (Game_OrderBy = {}));
var League_OrderBy;
(function (League_OrderBy) {
    League_OrderBy["ActiveGamesEntityIds"] = "activeGamesEntityIds";
    League_OrderBy["Country"] = "country";
    League_OrderBy["Games"] = "games";
    League_OrderBy["HasActiveGames"] = "hasActiveGames";
    League_OrderBy["Id"] = "id";
    League_OrderBy["Name"] = "name";
    League_OrderBy["Slug"] = "slug";
    League_OrderBy["Turnover"] = "turnover";
})(League_OrderBy || (League_OrderBy = {}));
/** Defines the order direction, either ascending or descending */
var OrderDirection;
(function (OrderDirection) {
    OrderDirection["Asc"] = "asc";
    OrderDirection["Desc"] = "desc";
})(OrderDirection || (OrderDirection = {}));
var Outcome_OrderBy;
(function (Outcome_OrderBy) {
    Outcome_OrderBy["UpdatedAt"] = "_updatedAt";
    Outcome_OrderBy["Condition"] = "condition";
    Outcome_OrderBy["Id"] = "id";
    Outcome_OrderBy["OutcomeId"] = "outcomeId";
    Outcome_OrderBy["Result"] = "result";
    Outcome_OrderBy["SortOrder"] = "sortOrder";
    Outcome_OrderBy["Title"] = "title";
})(Outcome_OrderBy || (Outcome_OrderBy = {}));
var Participant_OrderBy;
(function (Participant_OrderBy) {
    Participant_OrderBy["Game"] = "game";
    Participant_OrderBy["Id"] = "id";
    Participant_OrderBy["Image"] = "image";
    Participant_OrderBy["Name"] = "name";
    Participant_OrderBy["SortOrder"] = "sortOrder";
})(Participant_OrderBy || (Participant_OrderBy = {}));
var SelectionResult;
(function (SelectionResult) {
    SelectionResult["Lost"] = "Lost";
    SelectionResult["Won"] = "Won";
})(SelectionResult || (SelectionResult = {}));
var SportHub_OrderBy;
(function (SportHub_OrderBy) {
    SportHub_OrderBy["Id"] = "id";
    SportHub_OrderBy["Name"] = "name";
    SportHub_OrderBy["Slug"] = "slug";
    SportHub_OrderBy["Sports"] = "sports";
})(SportHub_OrderBy || (SportHub_OrderBy = {}));
var Sport_OrderBy;
(function (Sport_OrderBy) {
    Sport_OrderBy["Countries"] = "countries";
    Sport_OrderBy["Games"] = "games";
    Sport_OrderBy["Id"] = "id";
    Sport_OrderBy["Name"] = "name";
    Sport_OrderBy["Slug"] = "slug";
    Sport_OrderBy["SportId"] = "sportId";
    Sport_OrderBy["Sporthub"] = "sporthub";
})(Sport_OrderBy || (Sport_OrderBy = {}));
var _SubgraphErrorPolicy_;
(function (_SubgraphErrorPolicy_) {
    /** Data will be returned even if the subgraph has indexing errors */
    _SubgraphErrorPolicy_["Allow"] = "allow";
    /** If the subgraph has indexing errors, data will be omitted. The default. */
    _SubgraphErrorPolicy_["Deny"] = "deny";
})(_SubgraphErrorPolicy_ || (_SubgraphErrorPolicy_ = {}));const calcMindOdds = (props) => {
    const totalOdds = typeof props.odds === 'number' ? props.odds : props.odds.reduce((acc, odds) => acc * +odds, 1);
    const minOdds = 1 + (totalOdds - 1) * (100 - props.slippage) / 100;
    return minOdds.toFixed(ODDS_DECIMALS);
};const formatToFixed = (value, digitsCount) => {
    value = String(value);
    if (!/\./.test(value)) {
        return +value;
    }
    const [int, digits] = value.split('.');
    return +`${int}.${digits.substr(0, digitsCount)}`;
};const ratio = (self, other) => (self > other ? self / other : other / self);
const sigmoid = (value) => value / (value + 1);
const getOddsFromProbabilities = (probabilities, margin, winningOutcomesCount = 1) => {
    const precision = 0.0001;
    const maxIterations = 10;
    const odds = {};
    const spreads = Object.keys(probabilities).reduce((acc, outcomeId) => {
        acc[+outcomeId] = (1 - probabilities[+outcomeId]) * margin;
        return acc;
    }, {});
    let error = margin;
    for (let iteration = 0; iteration < maxIterations; iteration++) {
        let oddsSpread;
        {
            let spread = 0;
            Object.keys(probabilities).forEach(outcomeId => {
                const price = (1 - spreads[+outcomeId]) / probabilities[+outcomeId];
                odds[+outcomeId] = price;
                spread += 1 / price;
            });
            oddsSpread = 1 - winningOutcomesCount / spread;
        }
        if (ratio(margin, oddsSpread) - 1 < precision) {
            return odds;
        }
        if (margin <= oddsSpread) {
            throw new Error('margin <= oddsSpread');
        }
        const newError = margin - oddsSpread;
        if (newError === error) {
            if (margin / oddsSpread - 1 >= precision) {
                throw new Error('margin / oddsSpread - 1 >= precision');
            }
            return odds;
        }
        error = newError;
        Object.keys(spreads).forEach(outcomeId => {
            spreads[+outcomeId] +=
                (1 - spreads[+outcomeId] - probabilities[+outcomeId]) *
                    sigmoid((error * spreads[+outcomeId]) / (1 - 1 / odds[+outcomeId]) / (1 - margin) / oddsSpread);
        });
    }
    throw new Error(`Can't calculate odds from given params: ${JSON.stringify(probabilities)} / ${margin} / ${winningOutcomesCount}`);
};
const calcLiveOdds = ({ selection, betAmount, oddsData }) => {
    const { outcomeId: _outcomeId } = selection;
    const { margin, reinforcement, winningOutcomesCount, outcomes } = oddsData;
    const outcomeId = Number(_outcomeId);
    let allFunds = 0;
    const funds = Object.keys(outcomes).reduce((acc, outcomeKey) => {
        const { clearOdds } = outcomes[+outcomeKey];
        const probability = 1 / clearOdds;
        let fund = reinforcement * probability;
        if (outcomeId === +outcomeKey) {
            fund += Number(betAmount || '');
        }
        allFunds += fund;
        acc[+outcomeKey] = fund;
        return acc;
    }, {});
    const probabilities = Object.keys(funds).reduce((acc, outcomeKey) => {
        const fund = funds[+outcomeKey];
        acc[+outcomeKey] = fund / allFunds;
        return acc;
    }, {});
    const odds = getOddsFromProbabilities(probabilities, margin, winningOutcomesCount);
    if (odds[outcomeId] > outcomes[outcomeId].odds) {
        return outcomes[outcomeId].odds;
    }
    return formatToFixed(odds[outcomeId], 2);
};
const calcPrematchOdds = async (props) => {
    const { config, selections, betAmount, chainId, batchBetAmounts } = props;
    const { betToken, contracts } = chainsData[chainId];
    const isBatch = Boolean(Object.keys(batchBetAmounts || {}).length);
    if (selections.length === 1 || isBatch) {
        let odds = {};
        const contracts = selections.map(({ conditionId, outcomeId, coreAddress }) => {
            const _betAmount = isBatch ? batchBetAmounts?.[`${conditionId}-${outcomeId}`] : betAmount;
            const rawAmount = parseUnits(_betAmount || '', betToken.decimals);
            return {
                abi: prematchCoreAbi,
                address: coreAddress,
                chainId,
                functionName: 'calcOdds',
                args: [BigInt(conditionId), rawAmount, BigInt(outcomeId)],
            };
        });
        try {
            const response = await readContracts(config, {
                contracts,
            });
            odds = selections.reduce((acc, { conditionId, outcomeId }, index) => {
                const key = `${conditionId}-${outcomeId}`;
                const result = response[index]?.result;
                acc[key] = formatToFixed(formatUnits(typeof result === 'bigint' ? result : 0n, ODDS_DECIMALS), 5);
                return acc;
            }, {});
        }
        catch { }
        return odds;
    }
    if (selections.length > 1) {
        const rawAmount = parseUnits(betAmount || '', betToken.decimals);
        const expressAddress = contracts.prematchComboCore.address;
        const subBets = selections.map(({ conditionId, outcomeId }) => ({
            conditionId: BigInt(conditionId),
            outcomeId: BigInt(outcomeId),
        }));
        try {
            const [conditionOdds] = await readContract(config, {
                abi: prematchComboCoreAbi,
                address: expressAddress,
                chainId,
                functionName: 'calcOdds',
                args: [subBets, rawAmount],
            });
            return selections.reduce((acc, { conditionId, outcomeId }, index) => {
                const key = `${conditionId}-${outcomeId}`;
                acc[key] = formatToFixed(formatUnits(conditionOdds[index], ODDS_DECIMALS), 5);
                return acc;
            }, {});
        }
        catch { }
    }
    return {};
};const getIsPendingResolution = (startDate) => {
    const now = Date.now();
    const isStarted = startDate < now;
    const pendingResolutionDate = startDate + 6000000;
    return isStarted && pendingResolutionDate < now;
};
var GameStatus;
(function (GameStatus) {
    GameStatus[GameStatus["Created"] = 0] = "Created";
    GameStatus[GameStatus["Live"] = 1] = "Live";
    GameStatus[GameStatus["Resolved"] = 2] = "Resolved";
    GameStatus[GameStatus["Canceled"] = 3] = "Canceled";
    GameStatus[GameStatus["Paused"] = 4] = "Paused";
    GameStatus[GameStatus["PendingResolution"] = 5] = "PendingResolution";
})(GameStatus || (GameStatus = {}));
const getGameStatus = (props) => {
    const { graphStatus, startsAt, isGameInLive } = props;
    const startDate = startsAt * 1000;
    const isStarted = startDate < Date.now();
    // we use LiveGameStatus enum for conditions because it contains PrematchGameStatus
    if (graphStatus === GameStatus$1.Canceled) {
        return GameStatus.Canceled;
    }
    if (graphStatus === GameStatus$1.Paused) {
        return GameStatus.Paused;
    }
    if (graphStatus === GameStatus$1.Resolved) {
        return GameStatus.Resolved;
    }
    if (graphStatus === GameStatus$1.Finished) {
        return GameStatus.PendingResolution;
    }
    if (isStarted) {
        if (!isGameInLive && getIsPendingResolution(startDate)) {
            return GameStatus.PendingResolution;
        }
        return GameStatus.Live;
    }
    return GameStatus.Created;
};var BetStatus;
(function (BetStatus) {
    BetStatus[BetStatus["Accepted"] = 0] = "Accepted";
    BetStatus[BetStatus["Live"] = 1] = "Live";
    BetStatus[BetStatus["PendingResolution"] = 2] = "PendingResolution";
    BetStatus[BetStatus["Resolved"] = 3] = "Resolved";
    BetStatus[BetStatus["Canceled"] = 4] = "Canceled";
})(BetStatus || (BetStatus = {}));
const getExpressIsLive = (games) => {
    const firstStartDate = Math.min(...games.map(({ startsAt }) => +startsAt));
    return +firstStartDate * 1000 < Date.now();
};
const getExpressIsPendingResolution = (games) => {
    const lastStartDate = Math.max(...games.map(({ startsAt }) => +startsAt));
    const lastGames = games.filter(({ startsAt }) => +startsAt === lastStartDate);
    return lastGames.some(({ status, startsAt }) => {
        return getGameStatus({ graphStatus: status, startsAt: +startsAt, isGameInLive: false }) === GameStatus.PendingResolution;
    });
};
const getBetStatus = (props) => {
    const { games, graphStatus, isLiveBet } = props;
    if (graphStatus === BetStatus$1.Canceled) {
        return BetStatus.Canceled;
    }
    if (graphStatus === BetStatus$1.Resolved) {
        return BetStatus.Resolved;
    }
    const isExpress = games.length > 1;
    const isPendingResolution = isExpress
        ? getExpressIsPendingResolution(games)
        : getGameStatus({ graphStatus: games[0].status, startsAt: +games[0].startsAt, isGameInLive: isLiveBet }) === GameStatus.PendingResolution;
    if (isPendingResolution) {
        return BetStatus.PendingResolution;
    }
    const isLive = isExpress
        ? getExpressIsLive(games)
        : getGameStatus({ graphStatus: games[0].status, startsAt: +games[0].startsAt, isGameInLive: isLiveBet }) === GameStatus.Live;
    if (isLive) {
        return BetStatus.Live;
    }
    return BetStatus.Accepted;
};const getLiveBetFee = async (chainId) => {
    const api = getApiEndpoint(chainId);
    const environment = environments[chainId];
    const response = await fetch(`${api}/orders/gas?environment=${environment}`);
    const data = await response.json();
    return data;
};const getPrematchBetDataBytes = (selections) => {
    if (selections.length > 1) {
        const tuple = selections.map(({ conditionId, outcomeId }) => [
            BigInt(conditionId),
            BigInt(outcomeId),
        ]);
        return encodeAbiParameters(parseAbiParameters('(uint256, uint64)[]'), [
            tuple,
        ]);
    }
    const { conditionId, outcomeId } = selections[0];
    return encodeAbiParameters(parseAbiParameters('uint256, uint64'), [
        BigInt(conditionId),
        BigInt(outcomeId),
    ]);
};const groupByConditionId = (data) => {
    return data.reduce((acc, item) => {
        const { conditionId } = item;
        const key = String(conditionId);
        if (!acc[key]) {
            acc[key] = [];
        }
        acc[key].push(item);
        return acc;
    }, {});
};const groupConditionsByMarket = (conditions) => {
    const outcomesByMarkets = {};
    const result = {};
    const sportId = conditions[0].game.sport.sportId;
    conditions.forEach((condition) => {
        const { conditionId, outcomes: rawOutcomes, status, game: { gameId }, wonOutcomeIds } = condition;
        const coreAddress = condition.core?.address || liveHostAddress;
        const lpAddress = condition.core?.liquidityPool?.address || '';
        const isExpressForbidden = condition.isExpressForbidden ?? true;
        const customMarketName = condition.title;
        const margin = condition.margin;
        rawOutcomes.forEach((rawOutcome) => {
            const { outcomeId } = rawOutcome;
            const odds = rawOutcome.odds;
            const customSelectionName = rawOutcome.title;
            const betTypeOdd = dictionaries.outcomes[outcomeId];
            if (!betTypeOdd) {
                console.warn(`betTypeOdd not found for "outcomeId: ${outcomeId}"`);
                return;
            }
            const marketKey = getMarketKey(outcomeId);
            const marketName = customMarketName && customMarketName !== 'null' ? customMarketName : getMarketName({ outcomeId });
            const selectionName = customSelectionName && customSelectionName !== 'null' ? customSelectionName : getSelectionName({ outcomeId, withPoint: true });
            const marketDescription = getMarketDescription({ outcomeId });
            const outcome = {
                coreAddress: coreAddress,
                lpAddress: lpAddress,
                conditionId,
                outcomeId,
                selectionName,
                status,
                gameId,
                isExpressForbidden,
                margin: Boolean(margin) ? formatUnits(BigInt(margin), MARGIN_DECIMALS) : undefined,
            };
            if (Array.isArray(wonOutcomeIds)) {
                outcome.isWon = wonOutcomeIds.includes(outcomeId);
            }
            if (odds) {
                outcome.odds = +odds;
            }
            if (!outcomesByMarkets[marketKey]) {
                outcomesByMarkets[marketKey] = [];
                result[marketKey] = {
                    name: marketName,
                    marketKey,
                    description: marketDescription,
                    outcomeRows: [],
                };
            }
            outcomesByMarkets[marketKey].push(outcome);
        });
    });
    // markets with different conditionIds
    const marketsWithDifferentConditionIds = ['1', '2'];
    // sort by outcomeId and group by conditionId
    Object.keys(outcomesByMarkets).forEach((marketKey) => {
        const marketId = marketKey.split('-')[0];
        // get the conditions related to the market
        const outcomes = outcomesByMarkets[marketKey];
        const validSelectionsByMarketId = {
            '1': [1, 2, 3],
            '2': [4, 5, 6],
        };
        const validSelections = validSelectionsByMarketId[marketId];
        if (validSelections?.length) {
            const outcomesSelections = outcomes.map((outcome) => (dictionaries.outcomes[String(outcome.outcomeId)].selectionId));
            const isValid = validSelections.every(selection => outcomesSelections.includes(selection));
            if (!isValid) {
                delete result[marketKey];
                return;
            }
        }
        // sort the conditions by selectionId
        outcomes.sort((a, b) => {
            const { outcomes: dictionaryOutcomes } = dictionaries;
            const left = dictionaryOutcomes[String(a.outcomeId)].selectionId;
            const right = dictionaryOutcomes[String(b.outcomeId)].selectionId;
            return left - right;
        });
        // these markets have few outcomes and not requires additional actions
        if (marketsWithDifferentConditionIds.includes(marketId)) {
            result[marketKey].outcomeRows = [outcomes];
        }
        // others need to be grouped by conditionId to allow draw outcomes in rows in UI, e.g.
        //
        // Team 1 - Total Goals:
        // Over (0.5)   Under (0.5)
        // Over (1.5)   Under (1.5)
        //
        else {
            const conditionsByConditionId = groupByConditionId(outcomes);
            result[marketKey].outcomeRows = Object.values(conditionsByConditionId).sort((a, b) => {
                const { points, outcomes: dictionaryOutcomes } = dictionaries;
                /*
                  we should always sort by param in first outcome
        
                  Handicap
                  Team 1 (-2.5)   Team 2 (2.5)
                  Team 1 (-1.5)   Team 2 (1.5)
        
                  Total Goals
                  Over (1.5)   Under (1.5)
                  Over (2.5)   Under (2.5)
                */
                const aPointId = dictionaryOutcomes[String(a[0].outcomeId)].pointsId;
                const bPointId = dictionaryOutcomes[String(b[0].outcomeId)].pointsId;
                const aFirstOutcome = +points[aPointId];
                const bFirstOutcome = +points[bPointId];
                return aFirstOutcome - bFirstOutcome;
            });
        }
    });
    const markets = Object.values(result);
    const orderedMarketKeys = dictionaries.marketOrders?.[sportId];
    if (!orderedMarketKeys) {
        return markets;
    }
    return markets.sort((a, b) => {
        const prevMarketIndex = orderedMarketKeys.indexOf(a.marketKey);
        const nextMarketIndex = orderedMarketKeys.indexOf(b.marketKey);
        if (prevMarketIndex >= 0 && nextMarketIndex >= 0) {
            return prevMarketIndex - nextMarketIndex;
        }
        if (prevMarketIndex < 0 && nextMarketIndex >= 0) {
            return 1;
        }
        if (prevMarketIndex >= 0 && nextMarketIndex < 0) {
            return -1;
        }
        return 0;
    });
};var FreeBetStatus;
(function (FreeBetStatus) {
    FreeBetStatus["New"] = "New";
    FreeBetStatus["Claimed"] = "Claimed";
    FreeBetStatus["Redeemed"] = "Redeemed";
    FreeBetStatus["Canceled"] = "Canceled";
    FreeBetStatus["Reissued"] = "Reissued";
    FreeBetStatus["Withdrawn"] = "Withdrawn";
})(FreeBetStatus || (FreeBetStatus = {}));
const getFreeBets = async ({ chainId, account, affiliate }) => {
    const api = getApiEndpoint(chainId);
    const params = new URLSearchParams({
        owner: account.toLowerCase(),
        affiliate: affiliate,
    });
    const response = await fetch(`${api}/freebets/list?${params}`);
    if (response.status === 404) {
        return null;
    }
    if (!response.ok) {
        throw new Error(`Status ${response.status}: ${response.statusText}`);
    }
    const data = await response.json();
    return data;
};var WaveLevelName;
(function (WaveLevelName) {
    WaveLevelName["Grey"] = "Grey";
    WaveLevelName["Mist"] = "Mist";
    WaveLevelName["Sky"] = "Sky";
    WaveLevelName["Blue"] = "Blue";
    WaveLevelName["Ultramarine"] = "Ultramarine";
    WaveLevelName["Bright"] = "Bright";
    WaveLevelName["Brilliant"] = "Brilliant";
    WaveLevelName["Royal"] = "Royal";
})(WaveLevelName || (WaveLevelName = {}));
const getWaveLevels = async ({ waveId, chainId } = { waveId: 'active', chainId: polygon.id }) => {
    const api = getApiEndpoint(chainId);
    const response = await fetch(`${api}/waves/${waveId}/levels`);
    if (response.status === 404) {
        return null;
    }
    if (!response.ok) {
        throw new Error(`Status ${response.status}: ${response.statusText}`);
    }
    const data = await response.json();
    return [...data].sort((a, b) => a.level - b.level);
};const getWaveStats = async ({ account, waveId = 'active', chainId = polygon.id }) => {
    const api = getApiEndpoint(chainId);
    const response = await fetch(`${api}/waves/${waveId}/participants/${account?.toLowerCase()}/stats`);
    if (response.status === 404) {
        return null;
    }
    if (!response.ok) {
        throw new Error(`Status ${response.status}: ${response.statusText}`);
    }
    const data = await response.json();
    return data;
};const getWavePeriods = async ({ waveId, chainId } = { waveId: 'active', chainId: polygon.id }) => {
    const api = getApiEndpoint(chainId);
    const response = await fetch(`${api}/waves/${waveId}/periods`);
    if (response.status === 404) {
        return null;
    }
    if (!response.ok) {
        throw new Error(`Status ${response.status}: ${response.statusText}`);
    }
    const data = await response.json();
    return data;
};const getWaveLeaderBoard = async (props = { waveId: 'active', chainId: polygon.id }) => {
    const { waveId, account, startsAt, chainId } = props;
    const api = getApiEndpoint(chainId);
    const baseUrl = `${api}/waves/${waveId}`;
    let endpoint = startsAt
        ? `${baseUrl}/periods/${startsAt}/leaderboard`
        : `${baseUrl}/leaderboard`;
    if (account) {
        endpoint += `?address=${account?.toLowerCase()}`;
    }
    const response = await fetch(endpoint);
    if (response.status === 404) {
        return null;
    }
    if (!response.ok) {
        throw new Error(`Status ${response.status}: ${response.statusText}`);
    }
    const data = await response.json();
    if (startsAt) {
        return data.map((item) => {
            const { address, points, position, expectedPositionMultiplier } = item;
            const rawPoints = parseUnits(points, 12);
            const rawMultipliedPoints = parseUnits(points, 12) * parseUnits(expectedPositionMultiplier, 12);
            const bonusPoints = formatUnits(rawMultipliedPoints - rawPoints, 24);
            const totalMultipliedPoints = formatUnits(rawMultipliedPoints, 24);
            return {
                position,
                address,
                points,
                bonusPoints,
                totalMultipliedPoints,
                bonusMultiplier: +expectedPositionMultiplier,
                level: null,
                levelDescription: null,
            };
        });
    }
    return data.map((item) => {
        const { address, points, position, level, levelDescription, multipliedPoints: totalMultipliedPoints } = item;
        return {
            position,
            address,
            points,
            bonusPoints: null,
            bonusMultiplier: null,
            totalMultipliedPoints,
            level,
            levelDescription,
        };
    });
};const activateWave = async ({ account, waveId = 'active', chainId = polygon.id }) => {
    const api = getApiEndpoint(chainId);
    const response = await fetch(`${api}/waves/${waveId}/participants/${account?.toLowerCase()}/activate`);
    await response.json();
};const deBridgeChainIdByOriginalChainId = {
    245022934: 100000001, // Neon
    100: 100000002, // Gnosis
    1890: 100000003, // LightLink
    1088: 100000004, // Metis
    7171: 100000005, // Bitrock
};
const getDeBridgeSupportedChains = async () => {
    const response = await fetch(`${deBridgeUrl}/supported-chains-info`);
    if (response.status === 404) {
        return null;
    }
    if (!response.ok) {
        throw new Error(`Status ${response.status}: ${response.statusText}`);
    }
    const { chains } = await response.json();
    return chains;
};const DE_BRIDGE_DEFAULT_DEADLINE = 300; // 5 min
const createDeBridgeBet = async (props) => {
    const { account, betAmount, dstChainId, selections, totalOdds, slippage, srcChainId, srcChainTokenIn, affiliate, referralCode, deadline, } = props;
    const { betToken, contracts } = chainsData[dstChainId];
    const fixedAmount = parseFloat(betAmount).toFixed(betToken.decimals);
    const fixedMinOdds = calcMindOdds({ odds: totalOdds, slippage });
    const coreAddress = selections.length > 1 ? contracts.prematchComboCore.address : contracts.prematchCore.address;
    const betData = getPrematchBetDataBytes(selections);
    const rawAmount = parseUnits(fixedAmount, betToken.decimals);
    const rawMinOdds = parseUnits(fixedMinOdds, ODDS_DECIMALS);
    const rawDeadline = BigInt(Math.floor(Date.now() / 1000) + (deadline || DE_BRIDGE_DEFAULT_DEADLINE));
    const params = new URLSearchParams({
        dstChainId: String(deBridgeChainIdByOriginalChainId[dstChainId] || dstChainId),
        srcChainOrderAuthorityAddress: account,
        prependOperatingExpenses: 'false',
        srcChainId: String(deBridgeChainIdByOriginalChainId[srcChainId] || srcChainId),
        srcChainTokenIn,
        srcChainTokenInAmount: 'auto',
        dstChainTokenOut: betToken.address,
        dstChainTokenOutAmount: String(rawAmount),
        dstChainTokenOutRecipient: account,
        dstChainOrderAuthorityAddress: account,
        externalCall: JSON.stringify({
            version: 'evm_1',
            fields: {
                to: contracts.lp.address,
                data: encodeFunctionData({
                    abi: contracts.lp.abi,
                    functionName: 'betFor',
                    args: [
                        account,
                        coreAddress,
                        rawAmount,
                        rawDeadline,
                        {
                            affiliate,
                            minOdds: rawMinOdds,
                            data: betData,
                        },
                    ],
                }),
            },
        }),
        referralCode: String(referralCode),
    });
    const response = await fetch(`${deBridgeUrl}/dln/order/create-tx?${params}`);
    if (response.status === 404) {
        return null;
    }
    if (!response.ok) {
        throw new Error(`Status ${response.status}: ${response.statusText}`);
    }
    const data = await response.json();
    return data;
};const getDeBridgeSupportedTokens = async (chainId) => {
    const response = await fetch(`${deBridgeUrl}/token-list?chainId=${chainId}`);
    if (response.status === 404) {
        return null;
    }
    if (!response.ok) {
        throw new Error(`Status ${response.status}: ${response.statusText}`);
    }
    const { tokens } = await response.json();
    return tokens;
};var DeBridgeOrderStatus;
(function (DeBridgeOrderStatus) {
    DeBridgeOrderStatus["None"] = "None";
    DeBridgeOrderStatus["Created"] = "Created";
    DeBridgeOrderStatus["Fulfilled"] = "Fulfilled";
    DeBridgeOrderStatus["SentUnlock"] = "SentUnlock";
    DeBridgeOrderStatus["OrderCancelled"] = "OrderCancelled";
    DeBridgeOrderStatus["SentOrderCancel"] = "SentOrderCancel";
    DeBridgeOrderStatus["ClaimedUnlock"] = "ClaimedUnlock";
    DeBridgeOrderStatus["ClaimedOrderCancel"] = "ClaimedOrderCancel";
})(DeBridgeOrderStatus || (DeBridgeOrderStatus = {}));
var DeBridgeExternalCallStatus;
(function (DeBridgeExternalCallStatus) {
    DeBridgeExternalCallStatus["NoExtCall"] = "NoExtCall";
    DeBridgeExternalCallStatus["AwaitingOrderFulfillment"] = "AwaitingOrderFulfillment";
    DeBridgeExternalCallStatus["AwaitingExecution"] = "AwaitingExecution";
    DeBridgeExternalCallStatus["Executing"] = "Executing";
    DeBridgeExternalCallStatus["Completed"] = "Completed";
    DeBridgeExternalCallStatus["Failed"] = "Failed";
    DeBridgeExternalCallStatus["Cancelled"] = "Cancelled";
})(DeBridgeExternalCallStatus || (DeBridgeExternalCallStatus = {}));
const getDeBridgeOrder = async (orderId) => {
    const response = await fetch(`${deBridgeTxUrl}/orders/${orderId}?t=${Date.now()}`);
    if (response.status === 404) {
        return null;
    }
    if (!response.ok) {
        throw new Error(`Status ${response.status}: ${response.statusText}`);
    }
    const data = await response.json();
    return data;
};export{BetResult,BetStatus,Bet_OrderBy,BettorFragmentDoc,BettorsDocument,ConditionStatus$1 as ConditionStatus,DeBridgeExternalCallStatus,DeBridgeOrderStatus,Environment,FreeBetStatus,GameBetsDocument,GameDocument,GameStatus,Game_OrderBy$1 as Game_OrderBy,GamesDocument,BetStatus$1 as GraphBetStatus,LiveBetFragmentDoc,LiveBetsDocument,LiveConditionDocument,LiveConditionFragmentDoc,Condition_OrderBy as LiveConditionOrderBy,LiveConditionsDocument,GameStatus$1 as LiveGraphGameStatus,MARGIN_DECIMALS,MIN_LIVE_BET_AMOUNT,MainGameInfoFragmentDoc,NavigationDocument,ODDS_DECIMALS,OrderDirection$1 as OrderDirection,PrematchBetFragmentDoc,PrematchBetsDocument,PrematchConditionDocument,PrematchConditionFragmentDoc,Condition_OrderBy$1 as PrematchConditionOrderBy,PrematchConditionsBatchDocument,PrematchConditionsDocument,GameStatus$2 as PrematchGraphGameStatus,SelectionResult$1 as SelectionResult,SportsDocument,SportsNavigationDocument,WaveLevelName,activateWave,calcLiveOdds,calcMindOdds,calcPrematchOdds,chainsData,chainsDataByEnv,createDeBridgeBet,deBridgeChainIdByOriginalChainId,deBridgeTxUrl,deBridgeUrl,environments,FreeBet as freeBetAbi,getApiEndpoint,getBetStatus,getDeBridgeOrder,getDeBridgeSupportedChains,getDeBridgeSupportedTokens,getFreeBets,getGameStatus,getLiveBetFee,getLiveGraphqlEndpoint,getPrematchBetDataBytes,getPrematchGraphqlEndpoint,getSocketEndpoint,getWaveLeaderBoard,getWaveLevels,getWavePeriods,getWaveStats,groupByConditionId,groupConditionsByMarket,liveCoreAbi,liveHostAddress,liveSupportedChains,lpAbi,prematchComboCoreAbi,prematchCoreAbi,proxyFrontAbi,setupContracts};
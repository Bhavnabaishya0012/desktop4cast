import { type TransactionReceipt, type Address } from 'viem';
import { type Selection } from '@azuro-org/toolkit';
type Props = {
    fromChainId: number;
    fromTokenAddress: string;
    betAmount: string;
    slippage: number;
    referralCode: number;
    affiliate: Address;
    selections: Selection[];
    odds: Record<string, number>;
    totalOdds: number;
    deadline?: number;
    onSuccess?(receipt?: TransactionReceipt): void;
    onError?(err?: Error): void;
};
export declare const useDeBridgeBet: (props: Props) => {
    orderId: `0x${string}` | undefined;
    submit: () => Promise<void>;
    estimation: {
        srcChainTokenIn: {
            address: Address;
            name: string;
            symbol: string;
            decimals: number;
            amount: string;
            approximateOperatingExpense: string;
            mutatedWithOperatingExpense: boolean;
        };
        srcChainTokenOut: {
            address: Address;
            name: string;
            symbol: string;
            decimals: number;
            amount: string;
            maxRefundAmount: string;
        };
        dstChainTokenOut: {
            address: Address;
            name: string;
            symbol: string;
            decimals: number;
            amount: string;
            recommendedAmount: string;
            withoutAdditionalTakerRewardsAmount: string;
            maxTheoreticalAmount: string;
        };
        recommendedSlippage: number;
        costsDetails: [string];
    } | undefined;
    fixFee: string | undefined;
    supportedChainIds: number[] | undefined;
    approveTx: {
        isPending: boolean;
        isProcessing: boolean;
    };
    betTx: {
        isPending: boolean;
        isProcessing: boolean;
    };
    isAllowanceLoading: boolean;
    isApproveRequired: boolean;
    isTxReady: boolean;
    loading: boolean;
};
export {};
